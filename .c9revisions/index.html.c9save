{"ts":1344138073087,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<!DOCTYPE html>\n<head>\n    <script src='dom.js'></script>\n</head>\n<body>\n\n\n\n<div class=head><p><a href=\"http://www.w3.org/\"><img height=48 alt=W3C\nsrc=\"http://www.w3.org/Icons/w3c_home\" width=72></a>\n<h1><span class=\"modulename\">Selectors</span></h1>\n  <h2>W3C Candidate Recommendation 13 November 2001</h2>\n  <dl>\n    <dt>This version:\n    <dd><a href=\"http://www.w3.org/TR/2001/CR-css3-selectors-20011113\">\n                 http://www.w3.org/TR/2001/CR-css3-selectors-20011113</a>\n    <dt>Latest version:\n    <dd><a href=\"http://www.w3.org/TR/css3-selectors\">\n                 http://www.w3.org/TR/css3-selectors</a>\n    <dt>Previous version:\n    <dd><a href=\"http://www.w3.org/TR/2001/WD-css3-selectors-20010126\">\n                 http://www.w3.org/TR/2001/WD-css3-selectors-20010126</a>\n    <dt><a name=editors-list></a>Editors:\n    <dd><a href=\"mailto:glazman@netscape.com\">Daniel Glazman</a> (<span\n      class=company><a\n      href=\"http://www.netscape.com/\">Netscape/AOL</a></span>)\n    <dd><a href=\"mailto:tantekc@microsoft.com\">Tantek &Ccedil;elik</a> (<span\n  class=company><a href=\"http://www.microsoft.com/\">Microsoft Corporation</a></span>)\n    <dd><a href=\"mailto:ian@hixie.ch\">Ian Hickson</a>\n    <dd>Peter Linss (former editor, formerly of&nbsp;<span class=company><a\n  href=\"http://www.netscape.com/\">Netscape/AOL</a></span>)\n    <dd>John Williams (former editor, <span class=company><a\n  href=\"http://www.quark.com/\">Quark, Inc.</a></span>) \n  </dl>\n<p class=copyright><a\nhref=\"http://www.w3.org/Consortium/Legal/ipr-notice-20000612#Copyright\">Copyright</a>\n&copy;2001 <a href=\"http://www.w3.org/\"><abbr\ntitle=\"World Wide Web Consortium\">W3C</abbr></a><sup>&reg;</sup> (<a\nhref=\"http://www.lcs.mit.edu/\"><abbr\ntitle=\"Massachusetts Institute of Technology\">MIT</abbr></a>, <a\nhref=\"http://www.inria.fr/\"><abbr lang=fr\ntitle=\"Institut National de Recherche en Informatique et Automatique\">INRIA</abbr></a>,\n<a href=\"http://www.keio.ac.jp/\">Keio</a>), All Rights Reserved. W3C <a\nhref=\"http://www.w3.org/Consortium/Legal/ipr-notice-20000612#Legal_Disclaimer\">liability</a>,\n<a\nhref=\"http://www.w3.org/Consortium/Legal/ipr-notice-20000612#W3C_Trademarks\">trademark</a>,\n<a\nhref=\"http://www.w3.org/Consortium/Legal/copyright-documents-19990405\">document\nuse</a> and <a\nhref=\"http://www.w3.org/Consortium/Legal/copyright-software-19980720\">software\nlicensing</a> rules apply.\n<hr title=\"Separator for header\">\n</div>\n\n<h2><a name=abstract></a>Abstract</h2>\n<p><acronym title=\"Cascading Style Sheets\">CSS</acronym> (Cascading Style Sheets) is a language for describing the rendering of\n  <acronym title=\"Hypertext Markup Language\">HTML</acronym> and <acronym title=\"Extensible Markup Language\">XML</acronym>\n  documents on screen, on paper, in speech, etc. To bind style properties\n  to elements in the document, CSS uses <em>selectors,</em> which are patterns\n  that match one or more elements. This document describes the selectors that are proposed\n  for CSS level 3. It includes and extends the selectors of CSS level 2. \n<h2><a name=status></a>Status of this document</h2>\n<p>This document is one of the \"modules\" of the upcoming CSS3 specification. It\n  not only describes the selectors that already exist in <a\nhref=\"#CSS1\"><abbr title=\"CSS level 1\">CSS1</abbr></a> and <a\nhref=\"#CSS2\"><abbr title=\"CSS level 2\">CSS2</abbr></a>,\n  but also proposes new selectors for <abbr title=\"CSS level 3\">CSS3</abbr> as well as for\n  other languages that may need them. The CSS Working Group doesn't expect that all\n  implementations of CSS3 will have to implement all selectors. Instead,\n  there will probably be a small number of variants of CSS3, so-called \"profiles\".\n  For example, it may be that only a profile for non-interactive user agents\n  will include all of the proposed selectors. \n<p>This specification is being put forth as a <a href=\"http://www.w3.org/TR/#About\">Candidate\n  Recommendation</a> by the <a href=\"http://www.w3.org/Style/Group\">CSS Working\n  Group</a>. This document is a revision of the <a href=\"http://www.w3.org/TR/2001/WD-css3-selectors-20010126\">Working\n  Draft dated 2001 January 26</a>, and has incorporated suggestions received\n  during last call review, comments, and further deliberations of the W3C CSS\n  Working Group.\n<p>The duration of Candidate Recommendation is expected to last approximately\n  six months (ending <strong>May, 2002</strong>). All persons are encouraged\n  to review and implement this specification and return comments to the (<a\nhref=\"http://lists.w3.org/Archives/Public/www-style/\">archived</a>) public mailing\n  list <a\nhref=\"http://www.w3.org/Mail/Lists.html#www-style\">www-style</a> (see <a href=\"http://www.w3.org/Mail/Request\">instructions</a>).\n  W3C Members can also send comments directly to the CSS Working Group. \n<p>Should this specification prove impossible to implement, the Working Group\n  will return the document to Working Draft status and make necessary changes.\n  Otherwise, the Working Group anticipates asking the W3C Director to advance\n  this document to Proposed Recommendation.\n<p>This is still a draft document and may be updated, replaced, or obsoleted by\n  other documents at any time. It is inappropriate to cite a W3C Candidate Recommendation\n  as other than &quot;work in progress.&quot; A list of current W3C working drafts\n  can be found at <a href=\"http://www.w3.org/TR\">http://www.w3.org/TR</a>.<br>\n  <br>\n  This document may be available in <a\nhref=\"http://www.w3.org/Style/css3-selectors-updates/translations\">translation</a>.\n  The English version of this specification is the only normative version.\n<h2><a name=dependencies></a>Dependencies with other CSS3 Modules</h2>\n<ul>\n  <li>General Syntax\n  <li>Value Assignment, Cascade and Inheritance\n  <li>Generated Content / Markers\n  <li>User Interface\n</ul>\n<div class=subtoc>\n<h2><a name=contents>Table of contents</a></h2>\n<ul class=toc>\n  <li class=tocline2><a href=\"#context\">1.\n  Context</a>\n  <ul>\n    <li><a href=\"#changesFromCSS2\">1.1\n    Changes from CSS2</a> </li></ul>\n  <li class=tocline2><a href=\"#selectors\">2.\n  Selectors</a>\n  <li class=tocline2><a href=\"#casesens\">3.\n  Case sensitivity</a>\n  <li class=tocline2><a\n  href=\"#selector-syntax\">4. Selector\n  syntax</a>\n  <li class=tocline2><a href=\"#grouping\">5.\n  Groups of selectors</a>\n  <li class=tocline2><a\n  href=\"#simple-selectors\">6. Simple\n  selectors</a>\n  <ul class=toc>\n    <li class=tocline3><a\n    href=\"#type-selectors\">6.1 Type\n    selectors</a>\n    <ul class=toc>\n      <li class=tocline4><a\n      href=\"#typenmsp\">6.1.1 Type selectors\n      and Namespaces</a> </li></ul>\n    <li class=tocline3><a\n    href=\"#universal-selector\">6.2 Universal\n    selector</a>\n    <ul>\n      <li><a href=\"#univnmsp\">6.2.1\n      Universal selector and Namespaces</a> </li></ul>\n    <li class=tocline3><a\n    href=\"#attribute-selectors\">6.3\n    Attribute selectors</a>\n    <ul class=toc>\n      <li class=tocline4><a\n      href=\"#attribute-representation\">6.3.1\n      Representation of attributes and attributes values</a>\n      <li><a\n      href=\"#attribute-substrings\">6.3.2\n      Substring matching attribute selectors</a>\n      <li class=tocline4><a\n      href=\"#attrnmsp\">6.3.3 Attribute\n      selectors and Namespaces</a>\n      <li class=tocline4><a\n      href=\"#def-values\">6.3.4 Default\n      attribute values in DTDs</a> </li></ul>\n    <li class=tocline3><a\n    href=\"#class-html\">6.4 Class\n    selectors</a>\n    <li class=tocline3><a\n    href=\"#id-selectors\">6.5 ID\n    selectors</a>\n    <li class=tocline3><a\n    href=\"#pseudo-classes\">6.6\n    Pseudo-classes</a>\n    <ul class=toc>\n      <li class=tocline4><a\n      href=\"#dynamic-pseudos\">6.6.1 Dynamic\n      pseudo-classes</a>\n      <li class=tocline4><a\n      href=\"#target-pseudo\">6.6.2 The\n      :target pseudo-class</a>\n      <li class=tocline4><a\n      href=\"#lang-pseudo\">6.6.3 The :lang()\n      pseudo-class</a>\n      <li class=tocline4><a\n      href=\"#UIstates\">6.6.4 UI element\n      states pseudo-classes</a>\n      <li class=tocline4><a\n      href=\"#structural-pseudos\">6.6.5\n      Structural pseudo-classes</a>\n      <ul>\n        <li><a href=\"#root-pseudo\">:root\n        pseudo-class</a>\n        <li><a\n        href=\"#nth-child-pseudo\">:nth-child()\n        pseudo-class</a>\n        <li><a\n        href=\"#nth-last-child-pseudo\">:nth-last-child()</a>\n\n        <li><a\n        href=\"#nth-of-type-pseudo\">:nth-of-type()\n        pseudo-class</a>\n        <li><a\n        href=\"#nth-last-of-type-pseudo\">:nth-last-of-type()</a>\n\n        <li><a\n        href=\"#first-child-pseudo\">:first-child\n        pseudo-class</a>\n        <li><a\n        href=\"#last-child-pseudo\">:last-child\n        pseudo-class</a>\n        <li><a\n        href=\"#first-of-type-pseudo\">:first-of-type\n        pseudo-class</a>\n        <li><a\n        href=\"#last-of-type-pseudo\">:last-of-type\n        pseudo-class</a>\n        <li><a\n        href=\"#only-child-pseudo\">:only-child\n        pseudo-class</a>\n        <li><a\n        href=\"#only-of-type-pseudo\">:only-of-type\n        pseudo-class</a>\n        <li><a href=\"#empty-pseudo\">:empty\n        pseudo-class</a> </li></ul>\n      <li class=tocline4><a\n      href=\"#content-selectors\">6.6.6\n      Content pseudo-class</a>\n      <li><a href=\"#negation\">6.6.7 The\n      negation pseudo-class</a> </li></ul></li></ul>\n  <li><a href=\"#pseudo-elements\">7.\n  Pseudo-elements</a>\n  <ul>\n    <li><a href=\"#first-line\">7.1 The\n    :first-line pseudo-element</a>\n    <li><a href=\"#first-letter\">7.2 The\n    :first-letter pseudo-element</a>\n    <li><a href=\"#UIfragments\">7.3 UI\n    element fragments pseudo-elements</a>\n    <li><a href=\"#gen-content\">7.4 The\n    :before and :after pseudo-elements</a> </li></ul>\n  <li class=tocline2><a\n  href=\"#combinators\">8. Combinators</a>\n  <ul class=toc>\n    <li class=tocline3><a\n    href=\"#descendant-combinators\">8.1\n    Descendant combinators</a>\n    <li class=tocline3><a\n    href=\"#child-combinators\">8.2 Child\n    combinators</a>\n    <li class=tocline3><a\n    href=\"#adjacent-combinators\">8.3\n    Adjacent sibling combinators</a>\n    <ul class=toc>\n      <li class=tocline4><a\n      href=\"#adjacent-d-combinators\">8.3.1\n      Adjacent direct combinators</a>\n      <li class=tocline4><a\n      href=\"#adjacent-i-combinators\">8.3.2\n      Adjacent indirect combinators</a> </li></ul></li></ul>\n  <li class=tocline2><a\n  href=\"#specificity\">9. Calculating a\n  selector's specificity</a>\n  <li class=tocline2><a\n  href=\"#w3cselgrammar\">10. The grammar of\n  <span class=\"modulename\">Selectors</span></a>\n  <ul class=toc>\n    <li class=tocline3><a\n    href=\"#grammar\">10.1 Grammar</a>\n    <li class=tocline3><a href=\"#lex\">10.2\n    Lexical scanner</a> </li></ul>\n  <li class=tocline2><a\n  href=\"#downlevel\">11. Namespaces and\n  Down-Level clients</a>\n  <li class=tocline2><a\n  href=\"#profiling\">12. Profiles</a>\n  <li><a href=\"#Conformance\">13. Conformance\n  and Requirements</a>\n  <li><a href=\"#Tests\">14. Tests</a>\n  <li><a href=\"#ACKS\">15.\n  Acknowledgements</a>\n  <li class=tocline2><a\n  href=\"#references\">16. References</a> <!--<li class=\"tocline2\"><a href=\"#changes\">Changes from previous version</a>--></li></ul></div>\n<h2><a name=context>1. Context</a></h2>\n<p>Members of the CSS+FP Working Group proposed during the Clamart meeting to\nmodularize the CSS specification. \n<p>This modularization, and the externalization of the general syntax of CSS\nwill reduce the size of the specification and allow new specifications\nto use selectors and/or CSS general syntax. For instance, behaviors or tree\ntransformations. \n<p>This specification contains its own <a\nhref=\"#Tests\">test cases</a>, one test per concept introduced in this document.\n  These tests are not full conformance tests but are intended to provide users\n  with a way to check if a part of this specification is implemented <i>ad minima</i>\n  or is not implemented at all.\n<h3><a name=changesFromCSS2></a>1.1 Changes from CSS2</h3>\n<p>The main differences between the selectors in CSS2 and those in\n <span class=\"modulename\">Selectors</span> are:\n<ul>\n  <li>the list of basic definitions (selector, group of selectors, simple\n  selector, etc.) has been clarified\n  <li>an optional namespace component is now allowed in type element selectors,\n  the universal selector and attribute selectors\n  <li>a new combinator\n  <li>new simple selectors including substring matching attribute selectors, and new\n  pseudo-classes\n  <li>new pseudo-elements, and introduction of the \"::\" convention for pseudo-elements\n  <li>a rewriting of the selectors grammar\n  <li>profiles to be added to specifications integrating <span class=\"modulename\">Selectors</span> and\n  defining the set of selectors which is actually supported by each\n  specification\n  <li><span class=\"modulename\">Selectors</span> are now a CSS3 Module and an independent specification.\n  Other  specifications can now refer to this document independently of CSS\n  <li>the specification now contains its own test suite. </li>\n</ul>\n<h2><a name=selectors></a>2. Selectors</h2>\n<p>A <span class=\"propernoun\">Selector</span> represents a structure. This structure can be used\nas a condition (e.g. in a CSS rule) that determines which elements\na selector matches in the document tree, or as a flat description of the\nHTML or XML fragment corresponding to that structure. \n<p><span class=\"propernoun\">Selectors</span> may range from simple element names to rich contextual\nrepresentations. \n<p>The following table summarizes <span class=\"propernoun\">Selector</span> syntax: \n<table class=selectorsreview width=\"100%\" border=1>\n  <tbody>\n  <tr>\n    <th class=pattern>Pattern</th>\n    <th class=meaning>Meaning</th>\n    <th class=described>Described in section</th>\n    <th class=origin>First defined in CSS level</th></tr>\n  <tr>\n    <td class=pattern>*</td>\n    <td class=meaning>any element</td>\n    <td class=described><a\n      href=\"#universal-selector\">Universal\n      selector</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E</td>\n    <td class=meaning>an element of type E</td>\n    <td class=described><a\n      href=\"#type-selectors\">Type selector</a></td>\n    <td class=origin>1</td></tr>\n  <tr>\n    <td class=pattern>E[foo]</td>\n    <td class=meaning>an E element with a \"foo\" attribute</td>\n    <td class=described><a\n      href=\"#attribute-selectors\">Attribute\n      selectors</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E[foo=\"bar\"]</td>\n    <td class=meaning>an E element whose \"foo\" attribute value is exactly\n      equal to \"bar\"</td>\n    <td class=described><a\n      href=\"#attribute-selectors\">Attribute\n      selectors</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E[foo~=\"bar\"]</td>\n    <td class=meaning>an E element whose \"foo\" attribute value is a list of\n      space-separated values, one of which is exactly equal to \"bar\"</td>\n    <td class=described><a\n      href=\"#attribute-selectors\">Attribute\n      selectors</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E[foo^=\"bar\"]</td>\n    <td class=meaning>an E element whose \"foo\" attribute value begins exactly\n      with the string \"bar\"</td>\n    <td class=described><a\n      href=\"#attribute-selectors\">Attribute\n      selectors</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E[foo$=\"bar\"]</td>\n    <td class=meaning>an E element whose \"foo\" attribute value ends exactly\n      with the string \"bar\"</td>\n    <td class=described><a\n      href=\"#attribute-selectors\">Attribute\n      selectors</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E[foo*=\"bar\"]</td>\n    <td class=meaning>an E element whose \"foo\" attribute value contains the\n      substring \"bar\"</td>\n    <td class=described><a\n      href=\"#attribute-selectors\">Attribute\n      selectors</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E[hreflang|=\"en\"]</td>\n    <td class=meaning>an E element whose \"hreflang\" attribute has a hyphen-separated\n      list of values beginning (from the left) with \"en\"</td>\n    <td class=described><a\n      href=\"#attribute-selectors\">Attribute\n      selectors</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E:root</td>\n    <td class=meaning>an E element, root of the document</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:nth-child(n)</td>\n    <td class=meaning>an E element, the n-th child of its parent</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:nth-last-child(n)</td>\n    <td class=meaning>an E element, the n-th child of its parent, counting\n      from the last one</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:nth-of-type(n)</td>\n    <td class=meaning>an E element, the n-th sibling of its type</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:nth-last-of-type(n)</td>\n    <td class=meaning>an E element, the n-th sibling of its type, counting\n      from the last one</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:first-child</td>\n    <td class=meaning>an E element, first child of its parent</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E:last-child</td>\n    <td class=meaning>an E element, last child of its parent</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:first-of-type</td>\n    <td class=meaning>an E element, first sibling of its type</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:last-of-type</td>\n    <td class=meaning>an E element, last sibling of its type</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:only-child</td>\n    <td class=meaning>an E element, only child of its parent</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:only-of-type</td>\n    <td class=meaning>an E element, only sibling of its type</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:empty</td>\n    <td class=meaning>an E element that has no children (including text\n    nodes)</td>\n    <td class=described><a\n      href=\"#structural-pseudos\">Structural\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:link <br>E:visited</td>\n    <td class=meaning>an E element being the source anchor of a hyperlink of\n      which the target is not yet visited (:link) or already visited\n    (:visited)</td>\n    <td class=described><a\n      href=\"#link\">The link\n      pseudo-classes</a></td>\n    <td class=origin>1</td></tr>\n  <tr>\n    <td class=pattern>E:active <br>E:hover <br>E:focus</td>\n    <td class=meaning>an E element during certain user actions</td>\n    <td class=described><a\n      href=\"#useraction-pseudos\">The user\n      action pseudo-classes</a></td>\n    <td class=origin>1 and 2</td></tr>\n  <tr>\n    <td class=pattern>E:target</td>\n    <td class=meaning>an E element being the target of the referring URI</td>\n    <td class=described><a\n      href=\"#target-pseudo\">The target\n      pseudo-class</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:lang(fr)</td>\n    <td class=meaning>an element of type E in language \"fr\" (the document\n      language specifies how language is determined)</td>\n    <td class=described><a\n      href=\"#lang-pseudo\">The :lang()\n      pseudo-class&nbsp;</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E:enabled<br>E:disabled&nbsp;</td>\n    <td class=meaning>a user interface element E which is enabled or\n    disabled</td>\n    <td class=described><a\n      href=\"#UIstates\">The UI element states\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:checked<br>E:indeterminate&nbsp;</td>\n    <td class=meaning>a user interface element E which is checked or in an\n      indeterminate state (for instance a radio-button or checkbox)</td>\n    <td class=described><a\n      href=\"#UIstates\">The UI element states\n      pseudo-classes</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E:contains(\"foo\")</td>\n    <td class=meaning>an E element containing the substring \"foo\" in its textual\n      contents</td>\n    <td class=described><a\n      href=\"#content-selectors\">Content\n      pseudo-class</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E::first-line</td>\n    <td class=meaning>the first formatted line of an E element</td>\n    <td class=described><a\n      href=\"#first-line\">The :first-line\n      pseudo-element</a></td>\n    <td class=origin>1</td></tr>\n  <tr>\n    <td class=pattern>E::first-letter</td>\n    <td class=meaning>the first formatted letter of an E element</td>\n    <td class=described><a\n      href=\"#first-letter\">The :first-letter\n      pseudo-element</a></td>\n    <td class=origin>1</td></tr>\n  <tr>\n    <td class=pattern>E::selection</td>\n    <td class=meaning>the portion of an E element that is currently\n      selected/highlighted by the user</td>\n    <td class=described><a\n      href=\"#UIfragments\">The UI element\n      fragments pseudo-elements</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E::before</td>\n    <td class=meaning>generated content before an E element</td>\n    <td class=described><a\n      href=\"#gen-content\">The :before\n      pseudo-element</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E::after</td>\n    <td class=meaning>generated content after an E element</td>\n    <td class=described><a\n      href=\"#gen-content\">The :after\n      pseudo-element</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E.warning</td>\n    <td class=meaning>an E element whose class is\n\"warning\" (the document language specifies how class is determined).</td>\n    <td class=described><a\n      href=\"#class-html\">Class\n    selectors</a></td>\n    <td class=origin>1</td></tr>\n  <tr>\n    <td class=pattern>E#myid</td>\n    <td class=meaning>an E element with ID equal to \"myid\".</td>\n    <td class=described><a\n      href=\"#id-selectors\">ID\n    selectors</a></td>\n    <td class=origin>1</td></tr>\n  <tr>\n    <td class=pattern>E:not(s)</td>\n    <td class=meaning>an E element that does not match simple selector s</td>\n    <td class=described><a\n      href=\"#negation\">Negation\n      pseudo-class</a></td>\n    <td class=origin>3</td></tr>\n  <tr>\n    <td class=pattern>E F</td>\n    <td class=meaning>an F element descendant of an E element</td>\n    <td class=described><a\n      href=\"#descendant-combinators\">Descendant\n      combinator</a></td>\n    <td class=origin>1</td></tr>\n  <tr>\n    <td class=pattern>E &gt; F</td>\n    <td class=meaning>an F element child of an E element</td>\n    <td class=described><a\n      href=\"#child-combinators\">Child\n      combinator</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E + F</td>\n    <td class=meaning>an F element immediately preceded by an E element</td>\n    <td class=described><a\n      href=\"#adjacent-d-combinators\">Direct\n      adjacent combinator</a></td>\n    <td class=origin>2</td></tr>\n  <tr>\n    <td class=pattern>E ~ F</td>\n    <td class=meaning>an F element preceded by an E element</td>\n    <td class=described><a\n      href=\"#adjacent-i-combinators\">Indirect\n      adjacent combinator</a></td>\n    <td class=origin>3</td></tr></tbody></table>\n<p>The meaning of each selector is derived from the table above by\n prepending \"matches\" to the contents of each cell of the \"Meaning\" column.\n<h2><a name=casesens>3. Case sensitivity</a></h2>\n<p>The case-sensitivity of document language element names in selectors depends\non the document language. For example, in HTML, element names are\ncase-insensitive, but in XML they are case-sensitive. \n<p>The case-sensitivity of attribute names and attribute values in attribute\nselectors also depends on the document language.\n<h2><a name=selector-syntax>4. Selector syntax</a></h2>\n<p>A&nbsp;<dfn><a name=selector>selector</a></dfn> is a chain of one or more <a\nhref=\"#sequence\">sequences of simple\nselectors</a> separated by <a\nhref=\"#combinators\">combinators</a>. \n<p>A&nbsp;<dfn><a name=sequence>sequence of simple selectors</a></dfn> is a chain\n  of <a\nhref=\"#simple-selectors-dfn\">simple selectors</a> that are not separated by a\n  <a\nhref=\"#combinators\">combinator</a>. It always begins with a <a\nhref=\"#type-selectors\">type selector</a> or a <a href=\"#universal-selector\">universal\n  selector</a>. No other type selector or universal selector is allowed in the\n  sequence. \n<p>A&nbsp;<dfn><a name=simple-selectors-dfn></a><a\nhref=\"#simple-selectors\">simple selector</a></dfn> is either a <a\nhref=\"#type-selectors\">type selector</a>, <a\nhref=\"#universal-selector\">universal selector</a>, <a\nhref=\"#attribute-selectors\">attribute selector</a>, <a href=\"#id-selectors\">ID\n  selector</a>, <a\nhref=\"#content-selectors\">content selector</a>, or <a\nhref=\"#pseudo-classes\">pseudo-class</a>. One <a\nhref=\"#pseudo-elements\">pseudo-element</a> may be appended to the last sequence\n  of simple selectors.\n<p><dfn>Combinators</dfn> are: white space, &quot;greater-than sign&quot; (<code>&gt;</code>),\n  &quot;plus sign&quot; (<code>+</code>) and &quot;tilde&quot; (<code>~</code>).\n  White space may appear between a combinator and the simple selectors around\n  it. <a name=whitespace></a>Only the characters \"space\" (Unicode code 32), \"tab\"\n  (9), \"line feed\" (10), \"carriage return\" (13), and \"form feed\" (12) can occur\n  in white space. Other space-like characters, such as \"em-space\" (8195) and \"ideographic\n  space\" (12288), are never part of white space.\n<p>The elements of the document tree represented by a selector are called <dfn><a name=subject></a>subjects\n  of the selector</dfn>. A selector consisting of a single sequence of simple\n  selectors represents any element satisfying its requirements. Prepending another\n  sequence of simple selectors and a combinator to a sequence imposes additional\n  matching constraints, so the subjects of a selector are always a subset of the\n  elements represented by the rightmost sequence of simple selectors.\n<p><strong><em>Note</em></strong><em>: an empty selector, containing no sequence\n  of simple selectors and no combinator, is an <a href=\"#Conformance\">invalid\n  selector</a>.</em>\n<h2><a name=grouping>5. Groups of selectors</a></h2>\n<p>When several selectors share the same declarations, they may be grouped into\na comma-separated list. \n<div class=example>CSS example(s):\n<p>In this example, we condense three rules with identical declarations into\none. Thus, <pre>h1 { font-family: sans-serif }\nh2 { font-family: sans-serif }\nh3 { font-family: sans-serif }</pre>is equivalent to: <pre>h1, h2, h3 { font-family: sans-serif }</pre></div>\n<p><b>Warning</b>: the equivalence is true in this example because all selectors\n  are valid selectors. If just one of these selectors is invalid, the entire group\n  of selectors is invalid thus invalidating the rule for all three heading elements,\n  whereas only one of the three individual heading rules would be invalid.\n  \n<h2><a name=simple-selectors>6. Simple selectors</a></h2>\n<h3><a name=type-selectors>6.1 Type selector</a></h3>\n<p>A&nbsp;<dfn>type selector</dfn> is the name of a document language element\ntype. A type selector represents an instance of the element type in the document\ntree. \n<div class=example>Example:\n  <p>The following selector represents an <code>h1</code> element in the document\ntree: <pre>h1</pre></div>\n<h4><a name=typenmsp>6.1.1 Type selectors and Namespaces</a></h4>\n<p>Type selectors allow an optional namespace (<a href=\"#XMLNAMES\">[XML-NAMES]</a>) component.\n  A namespace prefix that has been previously declared\n  may be prepended to the element name separated by the namespace separator\n  &quot;vertical bar&quot; (<code>|</code>). The namespace component may be left\n  empty to indicate that the selector is only to represent elements with no declared\n  namespace. Furthermore, an asterisk may be used for the namespace prefix, indicating\n  that the selector represents elements in any namespace (including elements\n  with no namespace). Element type selectors that have no namespace component\n  (no namespace separator), represent elements without regard\n  to the element's namespace (equivalent to \"<code>*|</code>\") unless a default\n  namespace has been declared. In that case, the selector will represent only\n  elements in the default namespace.\n<p>Note : a type selector containing a namespace prefix that has not been previously\n declared is an <a href=\"#Conformance\">invalid</a> selector.\n The mechanism for declaring a namespace prefix is left up to the language\n implementing <span class=\"modulename\">Selectors</span>.\n In CSS, such a mechanism is defined in the General Syntax module.\n\n<!--<p>An alternative approach would be to define element type selectors that have\n  no namespace component to match only elements that have no namespace (unless\n  a default namespace has been declared in the CSS). This would make the selector\n  \"<code>h1</code>\" equivalent to the selector \"<code>|h1</code>\" as opposed to\n  \"<code>*|h1</code>\". The downside to this approach is that legacy style sheets\n  (those written without any namespace constructs) will fail to match in all XML\n  documents where namespaces are used throughout, e.g. all XHTML documents. -->\n<p>It should be noted that if a namespace prefix used in a selector has not been\n  previously declared, then the selector must be considered invalid and the entire\n  style rule will be ignored in accordance with the <a href=\"#Conformance\">standard\n  error handling rules</a>. \n<p>It should further be noted that in a namespace aware client, element type\nselectors will only match against the <a\nhref=\"http://www.w3.org/TR/REC-xml-names/#NT-LocalPart\">local part</a> of the\nelement's <a href=\"http://www.w3.org/TR/REC-xml-names/#ns-qualnames\">qualified\nname</a>. See <a href=\"#downlevel\">below</a>\nfor notes about matching behaviors in down-level clients. \n<p>In summary:\n<dl>\n  <dt><code>ns|E</code>\n  <dd>elements with name E in namespace ns\n  <dt><code>*|E</code>\n  <dd>elements with name E in any namespace, including those without any\n  declared namespace\n  <dt><code>|E</code>\n  <dd>elements with name E without any declared namespace\n  <dt><code>E</code>\n  <dd>if no default namespace has been specified, this is equivalent to *|E.\n  Otherwise it is equivalent to ns|E where ns is the default namespace. </dl>\n<div class=example>\n<p>CSS examples: \n  <pre>@namespace foo url(http://www.example.com);\n\nfoo|h1 { color: blue }\n\nfoo|* { color: yellow }\n\n|h1 { color: red }\n\n*|h1 { color: green }\n\nh1 { color: green }</pre>\n  <p>The first rule will match only <code>h1</code> elements in the \"http://www.example.com\"\n    namespace. \n  <p>The second rule will match all elements in the \"http://www.example.com\" namespace.\n  \n<p>The third rule will match only <code>h1</code> elements without any declared\nnamespace. \n<p>The fourth rule will match <code>h1</code> elements in any namespace (including\nthose without any declared namespace).\n<p>The last rule is equivalent to the fourth rule because no default namespace\nhas been defined.</div>\n<h3><a name=universal-selector>6.2 Universal selector</a> </h3>\n<p>The&nbsp;<dfn>universal selector</dfn>, written &quot;asterisk&quot; (<code>*</code>),\n  represents the qualified name of any element type. It represents then any single\n  element in the document tree in any namespace (including those without any declared\n  namespace) if no default namespace has been specified. If a default namespace\n  has been specified, see <a\nhref=\"#univnmsp\">Universal selector and Namespaces</a> below.\n<p>If the universal selector is not the only component of a sequence of simple\nselectors, the <code>*</code> may be omitted. For example: \n<div class=example>\n<ul>\n  <li><code>*[hreflang|=en]</code> and <code>[hreflang|=en]</code> are equivalent,\n  <li><code>*.warning</code> and <code>.warning</code> are equivalent,\n  <li><code>*#myid</code> and <code>#myid</code> are equivalent. </li></ul></div>\n<p><b>Note</b>: it is recommended that the <code>*</code>, representing the\nuniversal selector, not be omitted.\n<h4><a name=univnmsp>6.2.1 Universal selector and Namespaces</a></h4>\n<p>The universal selector allows an optional namespace component.\n<dl>\n  <dt><code>ns|*</code>\n  <dd>all elements in namespace ns\n  <dt><code>*|*</code>\n  <dd>all elements\n  <dt><code>|*</code>\n  <dd>all elements without any declared namespace\n  <dt><code>*</code>\n  <dd>if no default namespace has been specified, this is equivalent to *|*.\n  Otherwise it is equivalent to ns|* where ns is the default namespace. </dl>\n<p>Note: a universal selector containing a namespace prefix that has not been\n previously declared is an <a href=\"#Conformance\">invalid</a> selector.\n The mechanism for declaring a namespace prefix is left up to the language\n implementing <span class=\"modulename\">Selectors</span>.\n In CSS, such a mechanism is defined in the General Syntax module.\n\n<h3><a name=attribute-selectors>6.3 Attribute selectors</a></h3>\n<p><span class=\"propernoun\">Selectors</span> allow the representation of an element's attributes.\n\n<h4><a name=attribute-representation>6.3.1 Attribute presence and values\nselectors</a></h4>\n<p>CSS2 introduced four attribute selectors:\n<dl>\n  <dt><code>[att]</code>\n  <dd>Represents the <code>att</code> attribute, whatever the value of the\n  attribute.\n  <dt><code>[att=val]</code>\n  <dd>Represents the <code>att</code> attribute with value exactly \"val\".\n  <dt><code>[att~=val]</code>\n  <dd>Represents the <code>att</code> attribute whose value is a space-separated list of words,\n  one of which is exactly \"val\". If this selector is used, the\n  words in the value must not contain spaces (since they are separated by\n  spaces).\n  <dt><code>[att|=val]</code>\n  <dd>Represents the <code>att</code> attribute, its value either being exactly \"val\" or\n  beginning with \"val\" immediately followed by \"-\".\n  This is primarily intended to allow language subcode matches\n  (e.g., the <code>hreflang</code> attribute on the <code>link</code> element in HTML)\n  as described in RFC 3066 (<a class=noxref href=\"#rfc3066\" rel=biblioentry>[RFC3066]</a>).\n   Note: for <code>lang</code> (or <code>xml:lang</code>) language subcode matching,\n   please see <a href=\"#lang-pseudo\">the <code>:lang</code> pseudo-class</a>.\n  \n</dl>\n<p>Attribute values must be identifiers or strings. The case-sensitivity of\nattribute names and values in selectors depends on the document language. \n<div class=example>Examples:\n  <p>For example, the following attribute selector represents an <code>h1</code>\nelement that carries the <code>title</code> attribute, whatever its value: <pre>h1[title]</pre>\n  <p>In the following example, the selector represents a <code>span</code> element\nwhose <code>class</code> attribute has exactly the value \"example\": <pre>span[class=example]</pre>\n  Multiple attribute selectors can be used to represent several attributes of\n  an element, or several conditions on the same attribute.\n  <p>Here, the selector represents a <code>span</code> element whose <code>hello</code>\nattribute has exactly the value \"Cleveland\" and whose <code>goodbye</code> attribute\nhas exactly the value \"Columbus\": <pre>span[hello=\"Cleveland\"][goodbye=\"Columbus\"]</pre>\n  <p>The following selectors illustrate the differences between \"=\" and \"~=\".\n    The first selector will represent, for example, the value \"copyright copyleft\n    copyeditor\" on a <code>rel</code> attribute. The second selector will only\n    represent an <code>a</code> element with an <code>href</code> attribute having\n    the exact value \"http://www.w3.org/\".\n  <pre>a[rel~=\"copyright\"]\na[href=\"http://www.w3.org/\"]</pre>\n  <p>The following selector represents a <code>link</code> element whose\n  <code>hreflang</code> attribute is exactly \"fr\".\n  <pre>link[hreflang=fr]</pre>\n  <p>The following selector represents a <code>link</code> element for which the\n    values of the <code>hreflang</code> attribute begins with \"en\", including\n    \"en\", \"en-US\", and \"en-cockney\":\n  <pre>link[hreflang|=\"en\"]</pre>\n  <p>Similarly, the following selectors represents a <code>DIALOGUE</code> element\nwhenever it has one of two different values for an attribute <code>character</code>:\n<pre>DIALOGUE[character=romeo]&nbsp;\n\nDIALOGUE[character=juliet]</pre></div>\n<h4><a name=attribute-substrings></a>6.3.2 Substring matching attribute\nselectors</h4>\n<p>Three additional attribute selectors are provided\n for matching substrings in the value of an attribute:\n<dl>\n  <dt><code>[att^=val]</code>\n  <dd>Represents the <code>att</code> attribute whose value begins with\n  the prefix \"val\"\n  <dt><code>[att$=val]</code>\n  <dd>Represents the <code>att</code> attribute whose value ends with the\n  suffix \"val\"\n  <dt><code>[att*=val]</code>\n  <dd>Represents the <code>att</code> attribute whose value contains at least\n  one instance of the substring \"val\" </dl>\n<p>Attribute values must be identifiers or strings. The case-sensitivity of\nattribute names in selectors depends on the document language. \n<p>Example:\n<p>The following selector represents an HTML <code>object</code>, referencing an\nimage:<pre>object[type^=\"image/\"]\n</pre>\n<p>The following selector represents an HTML anchor <code>a</code> with an\n  <code>href</code> attribute whose value ends with \".html\".\n<pre>a[href$=\".html\"]</pre>\n<p>The following selector represents a HTML paragraph with a <code>title</code>\nattribute whose value contains the substring \"hello\"<pre>p[title*=\"hello\"] </pre>\n<h4><a name=attrnmsp>6.3.3 Attribute selectors and Namespaces</a></h4>\n<p>Attribute selectors allow an optional namespace component to the attribute\n  name. A namespace prefix that has been previously declared may be prepended\n  to the attribute name separated by the namespace separator\n  &quot;vertical bar&quot; (<code>|</code>). In keeping with the Namespaces in\n  the XML recommendation, default namespaces do not apply to attributes, therefore\n  attribute selectors without a namespace component apply only to attributes that\n  have no declared namespace (equivalent to \"<code>|attr</code>\"). An asterisk\n  may be used for the namespace prefix indicating that the selector is to match\n  all attribute names without regard to the attribute's namespace.\n<p>Note : an attribute\n selector with an attribute name containing a namespace prefix that has\n not been previously declared is an <a href=\"#Conformance\">invalid</a> selector.\n The mechanism for declaring a namespace prefix is left up to the language\n implementing <span class=\"modulename\">Selectors</span>.\n In CSS, such a mechanism is defined in the General Syntax module.\n\n<p>CSS examples: \n<div class=example>\n  <pre>@namespace foo \"http://www.example.com\";\n\n[foo|att=val] { color: blue }\n\n[*|att] { color: yellow }\n\n[|att] { color: green }\n\n[att] { color: green }</pre>\n  The first rule will match only elements with the attribute <code>att</code>\n  in the \"http://www.example.com\" namespace with the value \"val\".\n  <p>The second rule will match only elements with the attribute <code>att</code>\nregardless of the namespace of the attribute (including no declared namespace).\n<p>The last two rules are equivalent and will match only elements with the\nattribute <code>att</code> where the attribute is not declared to be in a\nnamespace.</div>\n<h4><a name=def-values>6.3.4 Default attribute values in DTDs</a></h4>\n<p>Attribute selectors represent explicitly set attribute values in the document\n  tree. Default attribute values may be defined in a DTD or elsewhere.\n  <span class=\"propernoun\">Selectors</span> should be designed so that they work\n  even if the default values are not included in the document tree.\n<div class=example>Examples:\n  <p>For example, consider an element <code>EXAMPLE</code> with an attribute\n<code>notation</code> that has a default value of \"decimal\". The DTD fragment\nmight be <pre>&lt;!ATTLIST EXAMPLE notation (decimal,octal) \"decimal\"&gt;</pre>\n  If the selectors represent an <code>EXAMPLE</code> element when the value of\n  the attribute is explicitly set:\n  <pre>EXAMPLE[notation=decimal]\nEXAMPLE[notation=octal]</pre>\n  then to represent only the case where this attribute is set by default, and\n  not explicitly, the following selector might be used:\n  <pre>EXAMPLE:not([notation])</pre>\n</div>\n<h3><a name=class-html>6.4 Class selectors</a></h3>\n<p>Working with HTML, authors may use the period (<code>.</code>) notation as\n  an alternative to the <code>~=</code> notation when representing the <code>class</code>\n  attribute. Thus, for HTML, <code>div.value</code> and <code>div[class~=value]</code>\n  have the same meaning. The attribute value must immediately follow the &quot;period&quot;\n  (<code>.</code>). Note: UAs may apply selectors using the period (.) notation\n  in XML documents if the UA has namespace specific knowledge that allows it to\n  determine which attribute is the &quot;class&quot; attribute for the respective\n  namespace. One such example of namespace specific knowledge is the prose in\n  the specification for a particular namespace (e.g. SVG 1.0 [<a href=\"#SVG\">SVG</a>]\n  describes the <a href=\"http://www.w3.org/TR/2001/PR-SVG-20010719/styling.html#ClassAttribute\">SVG\n  &quot;class&quot; attribute</a> and how a UA should interpret it, and similarly\n  MathML 1.01 [<a href=\"#MATH\">MATH</a>] describes the <a href=\"http://www.w3.org/1999/07/REC-MathML-19990707/chapter2.html#sec2.3.4\">MathML\n  &quot;class&quot; attribute</a>.)\n<p>\n<div class=example>Examples:\n  <p>For example, we can represent an arbitrary element with\n<code>class~=\"pastoral\"</code> as follows: <pre>*.pastoral</pre>or just <pre>.pastoral</pre>\n  The following selector represents an <code>h1</code> element with <code>class~=\"pastoral\"</code>:\n  <pre>h1.pastoral</pre>\n  <p>For example, the following selector represents a <code>p</code> element whose\n<code>class</code> attribute has been assigned a list of space-separated values that\nincludes \"pastoral\" and \"marine\": <pre>p.pastoral.marine</pre>\n<p>It is fully identical to:<pre>p.marine.pastoral</pre>\n  <p>This selector represents for example a <code>p</code> with <code>class=\"pastoral\n    blue aqua marine\"</code> or <code>class=\"marine blue pastoral aqua\" </code>but\n    not <code>class=\"pastoral blue\"</code>.\n</div>\n<h3><a name=id-selectors>6.5 ID selectors</a></h3>\n<p>Document languages may contain attributes that are declared to be of type ID.\n  What makes attributes of type ID special is that no two such attributes can\n  have the same value in a document, regardless of the type of the elements that\n  carry them; whatever the document language, an ID typed attribute can be used\n  to uniquely identify its element. In HTML all ID attributes are named \"id\";\n  XML applications may name ID attributes differently, but the same restriction\n  applies. \n<p>An ID typed attribute of a document language allows authors to assign an identifier\n  to one element instance in the document tree. W3C ID selectors represent an\n  element instance based on its identifier. An ID selector contains a &quot;number\n  sign&quot; (#) immediately followed by the ID value. \n<div class=example>Examples:\n  <p>The following ID selector represents an <code>h1</code> element whose ID typed\n    attribute has the value \"chapter1\":\n  <pre>h1#chapter1</pre>\n  <p>The following ID selector represents any element whose ID typed attribute\n    has the value \"chapter1\":\n  <pre>#chapter1</pre>\n  The following selector represents any element whose ID typed attribute has the\n  value \"z98y\".\n  <pre>*#z98y</pre></div>\n<div class=note><i><b>Note.</b> In XML 1.0 <a class=noxref\nhref=\"http://www.w3.org/TR/REC-CSS2/refs.html#ref-XML10\"\nrel=biblioentry>[XML10]</a>, the information about which attribute contains an\n  element's IDs is contained in a DTD or a schema. When parsing XML, UAs do not\n  always read the DTD, and thus may not know what the ID of an element is\n  (though a UA may have namespace specific knowledge that allows it to determine\n  which attribute is the ID attribute for that namespace). If\n  a style sheet designer knows or suspects that a UA may not know what the ID of an\n  element is, he should use normal attribute selectors instead:\n  <code>[name=p371]</code> instead of <code>#p371</code>.\n  Elements in XML 1.0 documents without a DTD do not have IDs at all.</i></div>\n<h3><a name=pseudo-classes>6.6 Pseudo-classes</a></h3>\n<p>The pseudo-class concept is introduced to permit selection based on information\n  that lies outside of the document tree or that cannot be expressed using the\n  other simple selectors. \n<p>A pseudo-class always contains a &quot;colon&quot; (<code>:</code>) followed\n  by the name of the pseudo-class and optionally by a value between parentheses.\n\n<p>Pseudo-classes are allowed in all sequences of simple selectors contained in\n  a selector. Pseudo-classes are allowed anywhere in sequences of simple selectors,\n  after the leading type selector or universal selector (possibly omitted). Pseudo-class\n  names are case-insensitive. Some pseudo-classes are mutually exclusive, while\n  others can be applied simultaneously to the same element. Pseudo-classes may\n  be dynamic, in the sense that an element may acquire or lose a pseudo-class\n  while a user interacts with the document.\n<h4><a name=dynamic-pseudos>6.6.1 Dynamic pseudo-classes</a></h4>\n<p>Dynamic pseudo-classes classify elements on characteristics other than their\n  name, attributes or content, in principle characteristics that cannot be deduced\n  from the document tree.\n<p>Dynamic pseudo-classes do not appear in the document source or document tree.\n\n<h5>The&nbsp;<a name=link>link pseudo-classes: :link and :visited</a></h5>\n<p>User agents commonly display unvisited links differently from previously\nvisited ones. <span class=\"modulename\">Selectors</span> provides the pseudo-classes <code>:link</code> and\n<code>:visited</code> to distinguish them: \n<ul>\n  <li>The <code>:link</code> pseudo-class applies for links that have not yet been\n  visited.\n  <li>The <code>:visited</code> pseudo-class applies once the link has been visited\n  by the user. </li></ul>\n<div class=note><i><b>Note.</b> After some amount of time, user agents may\nchoose to return a visited link to the (unvisited) ':link' state.</i></div>\n<p>The two states are mutually exclusive. \n<div class=example>Example:\n  <p>The following selector represents links carrying class <code>external</code> and\nalready visited: <pre>a.external:visited</pre></div>\n<h5>The&nbsp;<a name=useraction-pseudos>user action pseudo-classes :hover,\n:active, and :focus</a></h5>\n<p>Interactive user agents sometimes change the rendering in response to user\nactions. <span class=\"modulename\">Selectors</span> provides three pseudo-classes for the selection of an\nelement the user is acting on. \n<ul>\n  <li>The <code>:hover</code> pseudo-class applies while the user designates an\n  element (with some pointing device), but does not activate it. For example, a\n  visual user agent could apply this pseudo-class when the cursor (mouse\n  pointer) hovers over a box generated by the element. User agents not\n  supporting <a\n  href=\"http://www.w3.org/TR/REC-CSS2/media.html#interactive-media-group\">interactive\n  media</a> do not have to support this pseudo-class. Some conforming user\n  agents supporting <a\n  href=\"http://www.w3.org/TR/REC-CSS2/media.html#interactive-media-group\">interactive\n  media</a> may not be able to support this pseudo-class (e.g., a pen device).\n  <li>The <code>:active</code> pseudo-class applies while an element is being\n  activated by the user. For example, between the times the user presses the\n  mouse button and releases it.\n  <li>The <code>:focus</code> pseudo-class applies while an element has the focus\n  (accepts keyboard or mouse events, or other forms of input). </li></ul>\n<p>There may be document language or implementation specific limits on which elements can become\n<code>:active</code> or acquire <code>:focus</code>. \n<!--\n<p>Only elements whose 'user-input' property (see <a\nhref=\"#UI-WD\">[UI]</a>) has the value of\n\"enabled\" can become <code>:active</code> or acquire <code>:focus</code>. -->\n<p>These pseudo-classes are not mutually exclusive. An element may match several\nof them at the same time. \n<div class=example>Examples:\n  <pre>a:link&nbsp;&nbsp;&nbsp; /* unvisited links */\na:visited /* visited links&nbsp;&nbsp; */\na:hover&nbsp;&nbsp; /* user hovers&nbsp;&nbsp;&nbsp;&nbsp; */\na:active&nbsp; /* active links&nbsp;&nbsp;&nbsp; */</pre>\n  <p>An example of combining dynamic pseudo-classes: <pre>a:focus\na:focus:hover</pre>\n  <p>The last selector matches <code>a</code> elements that are in pseudo-class\n    :focus and in pseudo-class :hover. \n</div>\n<div class=note><i><b>Note.</b> An element can be both ':visited' and ':active'\n(or ':link' and ':active').</i></div>\n<h4><a name=target-pseudo>6.6.2 The target pseudo-class :target</a></h4>\n<p>Some URIs refer to a location within a resource. This kind of URI ends with\n  a &quot;number sign&quot; (<code>#</code>) followed by an anchor identifier\n  (called the fragment identifier). \n<p>URIs with fragment identifiers link to a certain element within the document,\nknown as the target element. For instance, here is a URI pointing to an anchor\nnamed section_2 in a HTML document: \n<pre>http://example.com/html/top.html#section_2</pre>\n<p>A target element can be represented by the <code>:target</code> pseudo-class:\n\n<pre>p.note:target</pre>\n<p>represents a <code>p</code> of class note that is the target element of the\n  referring URI. \n<div class=example>CSS example of use of the <code>:target</code> pseudo-class: <pre>*:target { color : red }\n\n*:target::before { content : url(target.png) }</pre></div>\n<h4><a name=lang-pseudo>6.6.3 The language pseudo-class :lang</a></h4>\n<p>If the document language specifies how the human language of an element is\n  determined, it is possible to write selectors that represent an element based\n  on its language. For example, in HTML <a\nhref=\"#html40\"\nrel=biblioentry>[HTML4.01]</a>, the language is determined by a combination of\n  the <code>lang</code> attribute, the <code>meta</code> element, and possibly\n  by information from the protocol (such as HTTP headers). XML uses an attribute\n  called <code>xml:lang</code>, and there may be other document language-specific\n  methods for determining the language. \n<p>The pseudo-class <code>:lang(C)</code> represents an element that is in language\n  C. Here C is a language code as specified in HTML 4.01 <a\nhref=\"#html40\"\nrel=biblioentry>[HTML4.01]</a> and RFC 3066 <a\nhref=\"#rfc3066\"\nrel=biblioentry>[RFC3066]</a>.\n<div class=example>Examples:\n  <p>The two following selectors represent an HTML document that is in Belgian\n    French or German. The two next selectors represent <code>q</code> quotations\n    in an arbitrary element in Belgian French or German.\n  <pre>html:lang(fr-be)\nhtml:lang(de)\n:lang(fr-be) &gt; q\n:lang(de) &gt; q</pre>\n</div>\n<h4><a name=UIstates>6.6.4 The UI element states pseudo-classes</a></h4>\n<h5><a name=enableddisabled>The :enabled and :disabled pseudo-classes</a></h5>\n<p>The purpose of the <code>:enabled</code> pseudo-class is to allow authors to\n  customize the look of user interface elements which are enabled - which the\n  user can select/activate in some fashion (e.g. clicking on a button with a mouse).\n  There is a need for such a pseudo-class because there is no way to programmatically\n  specify the default appearance of say, an enabled <code>input</code> element\n  without also specifying what it would look like when it was disabled. \n<p>Similar to <code>:enabled</code>, <code>:disabled</code> allows the author to specify\nprecisely how a disabled or inactive user interface element should look. \n<p>It should be noted that most elements will be neither enabled nor disabled.\nAn element is enabled if the user can either activate it or transfer the focus\nto it. An element is disabled if it could be enabled, but the user cannot\npresently activate it or transfer focus to it. \n<h5><a name=checked>The :checked pseudo-class</a></h5>\n<p><!--The <code>:checked</code> pseudo-class only applies to elements which are\n'user-input: enabled' or 'user-input : disabled' (see [UI] for the 'user-input'\nproperty). -->Radio and checkbox elements can be toggled by the user. Some menu\nitems are \"checked\" when the user selects them. When such elements are toggled\n\"on\" the <code>:checked</code> pseudo-class applies. The <code>:checked</code>\npseudo-class initially applies to such elements that have the HTML4\n<code>selected</code> attribute as described in <a\nhref=\"http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.2.1\">Section\n17.2.1 of HTML4</a>, but of course the user can toggle \"off\" such elements in\nwhich case the <code>:checked</code> pseudo-class would no longer apply. While the\n<code>:checked</code> pseudo-class is dynamic in nature, and is altered by user\naction, since it can also be based on the presence of the semantic HTML4\n<code>selected</code> attribute, it applies to all media. \n<h5><a name=indeterminate>The :indeterminate pseudo-class</a></h5>\n<p><!--The <code>:indeterminate</code> pseudo-class only applies to elements which are\n'user-input: enabled' or 'user-input: disabled' (see <a\nhref=\"#UI-WD\">[UI]</a> for the 'user-input'\nproperty). -->Radio and checkbox elements can be toggled by the user, but are\nsometimes in an indeterminate state, neither checked nor unchecked. This can be\ndue to an element attribute, or DOM manipulation. The <code>:indeterminate</code>\npseudo-class applies to such elements. While the <code>:indeterminate</code>\npseudo-class is dynamic in nature, and is altered by user action, since it can\nalso be based on the presence of an element attribute, it applies to all media.\n\n<p>Components of a radio-group initialized with no pre-selected choice are an\nexample of :indeterminate state.\n<h4><a name=structural-pseudos>6.6.5 Structural pseudo-classes</a></h4>\n<p><span class=\"modulename\">Selectors</span> introduces the concept of&nbsp;<dfn>structural\npseudo-classes</dfn> to permit selection based on extra information that lies in\nthe document tree but cannot be represented by other simple selectors or\ncombinators. \n<p>Note that standalone PCDATA are not counted when calculating the position of\nan element in the list of children of its parent. When calculating the position\nof an element in the list of children of its parent, the index numbering starts\nat 1. \n<h5><a name=root-pseudo>:root pseudo-class</a></h5>\n<p>The <code>:root</code> pseudo-class represents an element that is the root\n  of the document. In HTML 4, this is the <code>HTML</code> element. In XML, it\n  is whatever is appropriate for the DTD or schema and namespace for that XML\n  document. \n<h5><a name=nth-child-pseudo>:nth-child() pseudo-class</a></h5>\n<p>The <code>:nth-child(an+b)</code> pseudo-class notation represents an element\n  that has an+b-1 siblings <strong>before</strong> it in the document tree, for\n  a given positive integer or zero value of n. In other words, this matches the\n  bth child of an element after all the children have been split into groups of\n  a elements each. For example, this allows the selectors to address every other\n  row in a table, and could be used, for example, to alternate the color of paragraph\n  text in a cycle of four. The a and b values must be zero, negative integers\n  or positive integers. The index of the first child of an element is 1.\n<p>In addition to this, <code>:nth-child()</code> can take 'odd' and 'even' for\nargument. 'odd' has the same signification as 2n+1, and 'even' has the same\nsignification as 2n. \n<div class=example>Examples:\n<pre>tr:nth-child(2n+1) /* represents every odd row of a HTML table */\ntr:nth-child(odd)  /* same */\ntr:nth-child(2n)   /* represents every even row of a HTML table */\ntr:nth-child(even) /* same */\n\n/* Alternate paragraph colours in CSS */\np:nth-child(4n+1) { color: navy; }\np:nth-child(4n+2) { color: green; }\np:nth-child(4n+3) { color: maroon; }\np:nth-child(4n+4) { color: purple; }</pre>\n</div>\n<p>When a=0, no repeating is used, so for example <code>:nth-child(0n+5)</code>\nmatches only the fifth child. When a=0, the a part need not be included, so the\nsyntax simplifies to <code>:nth-child(b)</code> and the last example simplifies\nto <code>:nth-child(5)</code>.\n<div class=example>\n<pre>foo:nth-child(0n+1)   /* represents an element foo, first child of its parent element */\nfoo:nth-child(1)      /* same */</pre>\n</div>\n<p>When a=1, the number may be omitted from the rule,\nso the following examples are equivalent: \n<div class=example>\n<pre>bar:nth-child(1n+0)   /* represents all bar elements, specificity (0,1,1) */\nbar:nth-child(n+0)    /* same */\nbar:nth-child(n)      /* same */\nbar                   /* same but lower specificity (0,0,1) */</pre>\n</div>\n<p>If b=0, then every a-th element is picked:\n<div class=example>\n<pre>tr:nth-child(2n) /* represents every even row of a HTML table */</pre>\n</div>\n<p>If both a and b are equal to zero, the pseudo-class represents no element in\nthe document tree.\n<p>The value a can be negative, but only the positive values of an+b, for n&gt;=\n  0, may represent an element in the document tree, of course:\n<div class=example>\n<pre>html|tr:nth-child(-n+6)  /* represents the 6 first rows of XHTML tables */</pre>\n</div>\n<h5><a name=nth-last-child-pseudo>:nth-last-child() pseudo-class</a></h5>\n<p>The <code>:nth-last-child(an+b)</code> pseudo-class notation represents an\nelement that has an+b-1 siblings <strong>after</strong> it in the document tree,\nfor a given positive integer or zero value of n. See <code>:nth-child()</code>\npseudo-class for the syntax of its argument. It also accepts the 'even' and\n'odd' values for argument.\n<div class=example>Examples: <pre>tr:nth-last-child(-n+2)    /* represents the two last rows of a HTML table */\n\nfoo:nth-last-child(odd)    /* represents all odd foo elements in their parent element,\n                              counting from the last one */</pre></div>\n<h5><a name=nth-of-type-pseudo>:nth-of-type() pseudo-class</a></h5>\n<p>The <code>:nth-of-type(an+b)</code> pseudo-class notation represents an element\nthat has an+b-1 siblings with the same element name <strong>before</strong> it\nin the document tree, for a given zero or positive integer value of n. In other\nwords, this matches the bth child of that type after all the children of that\ntype have been split into groups of a elements each. See\n<code>:nth-child()</code> pseudo-class for the syntax of its argument. It also\naccepts the 'even' and 'odd' values for argument.\n<div class=example>For example, this allows in CSS to alternate the position of\nfloated images: <pre>img:nth-of-type(2n+1) { float: right; }\nimg:nth-of-type(2n) { float: left; }\n</pre></div>\n<h5><a name=nth-last-of-type-pseudo>:nth-last-of-type() pseudo-class</a></h5>\n<p>The <code>:nth-last-of-type(an+b)</code> pseudo-class notation represents an\nelement that has an+b-1 siblings with the same element name\n<strong>after</strong> it in the document tree, for a given zero or positive\ninteger value of n. See <code>:nth-child()</code> pseudo-class for the syntax of\nits argument. It also accepts the 'even' and 'odd' values for argument. \n<div class=example>For example, to represent all <code>h2</code> children of a\nXHTML <code>body</code> except the first and last, one would use the following\nselector: <pre>body &gt; h2:nth-of-type(n+2):nth-last-of-type(n+2)</pre>\n<p>In this case, one could also use <code>:not()</code>, although the selector\nends up being just as long:<pre>body &gt; h2:not(:first-of-type):not(:last-of-type) </pre></div>\n<h5><a name=first-child-pseudo>:first-child pseudo-class</a></h5>\n<p>Same as <code>:nth-child(1)</code>. The <code>:first-child</code> pseudo-class\nrepresents an element that is the first child of some other element.\n<div class=example>Examples:\n  <p>In the following example, the selector represents a <code>p</code> element that\nis the first child of a <code>div</code> element: <pre>div &gt; p:first-child</pre>This selector can represent the <code>p</code>\ninside the <code>div</code> of the following fragment: <pre>&lt;p&gt; The last P before the note.&lt;/p&gt;\n&lt;div class=\"note\"&gt;\n&nbsp;&nbsp; &lt;p&gt; The first P inside the note.&lt;/p&gt;\n&lt;/div&gt;</pre>but cannot represent the second <code>p</code> in the following\nfragment: <pre>&lt;p&gt; The last P before the note.&lt;/p&gt;\n&lt;div class=\"note\"&gt;\n&nbsp;&nbsp; &lt;h2&gt;Note&lt;/h2&gt;\n&nbsp;&nbsp; &lt;p&gt; The first P inside the note.&lt;/p&gt;\n&lt;/div&gt;</pre>The following two selectors are equivalent: <pre>* &gt; a:first-child&nbsp;&nbsp; /* a is first child of any element */\na:first-child&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Same */</pre></div>\n<h5><a name=last-child-pseudo>:last-child pseudo-class</a></h5>\n<p>Same as <code>:nth-last-child(1)</code>.The <code>:last-child</code> pseudo-class\nrepresents an element that is the last child of some other element. \n<p>The following selector represents a list item <code>li</code> that is the last\nchild of an ordered list <code>ol</code>. \n<div class=example>Example:\n<pre>ol &gt; li:last-child</pre></div>\n<h5><a name=first-of-type-pseudo>:first-of-type pseudo-class</a></h5>\n<p>Same as <code>:nth-of-type(1)</code>.The <code>:first-of-type</code> pseudo-class\nrepresents an element that is the first sibling of its type in the list of\nchildren of its parent element. \n<div class=example>Example:\n<p>The following selector represents a definition title <code>dt</code> inside a\ndefinition list <code>dl</code>, this <code>dt</code> being the first of its type in\nthe list of children of its parent element. <pre>dl dt:first-of-type</pre>It is a valid description for the first two\n<code>dt</code> in the following example but not for the third one: <pre>&lt;dl&gt;&lt;dt&gt;gigogne&lt;/dt&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dd&gt;&lt;dl&gt;&lt;dt&gt;fus&amp;eacute;e&lt;/dt&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dd&gt;multistage rocket&lt;/dd&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dt&gt;table&lt;/dt&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;dd&gt;nest of tables&lt;/dd&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/dl&gt;&lt;/dd&gt;\n&lt;/dl&gt;</pre></div>\n<h5><a name=last-of-type-pseudo>:last-of-type pseudo-class</a></h5>\n<p>Same as <code>:nth-last-of-type(1)</code>.The <code>:last-of-type</code>\npseudo-class represents an element that is the last sibling of its type in the\nlist of children of its parent element. \n<div class=example>Example:\n<p>The following selector represents the last data cell <code>td</code> of a table\nrow. <pre>tr &gt; td:last-of-type</pre></div>\n<h5><a name=only-child-pseudo>:only-child pseudo-class</a></h5>\n<p>Represents an element that has no siblings. Same as\n<code>:first-child:last-child</code> or\n<code>:nth-child(1):nth-last-child(1)</code>, but with a lower specificity.\n<h5><a name=only-of-type-pseudo>:only-of-type pseudo-class</a></h5>\n<p>Represents an element that has no siblings with the same element name. Same\nas <code>:first-of-type:last-of-type</code> or\n<code>:nth-of-type(1):nth-last-of-type(1)</code>, but with a lower specificity.\n\n<h5><a name=empty-pseudo></a>:empty pseudo-class</h5>\n<p>The <code>:empty</code> pseudo-class represents an element that has no children\n  at all, including possibly empty text nodes, from a DOM point of view.\n<div class=example>Examples:\n<p><code>p:empty</code> is a valid representation of the following fragment:<pre>&lt;p&gt;&lt;/p&gt;</pre>\n<p><code>foo:empty</code> is not a valid representation for the following\nfragments:<pre>&lt;foo&gt;bar&lt;/foo&gt;</pre><pre>&lt;foo&gt;&lt;bar&gt;bla&lt;/bar&gt;&lt;/foo&gt;</pre><pre>&lt;foo&gt;this is not &lt;bar&gt;:empty&lt;/bar&gt;&lt;/foo&gt;</pre></div>\n<h4><a name=content-selectors>6.6.6 Content pseudo-class</a></h4>\n<p>The <code>:contains(\"foo\")</code> pseudo-class notation represents an element\nwhose textual contents contain the given substring. The argument of this\npseudo-class can be a string (surrounded by double quotes) or a keyword.\n<p>Usage of the content pseudo-class is restricted to static media types (see\n  <a href=\"#CSS2\">[CSS2]</a>).\n<p>The textual contents of a given element is determined by the concatenation of\nall PCDATA contained in the element and sub-elements. \n<div class=example>Example: <pre>p:contains(\"Markup\")</pre>is a correct and valid, but partial, description\nof: <pre>&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;t&lt;/strong&gt;ext\n&nbsp;&nbsp; &lt;strong&gt;M&lt;/strong&gt;&lt;em&gt;arkup&lt;/em&gt;\n&nbsp;&nbsp; &lt;strong&gt;L&lt;/strong&gt;anguage&lt;/p&gt;</pre></div>\n<p>Special characters can be inserted in the argument of a content pseudo-class\n  using the escape mechanism for Unicode characters and carriage returns.\n<p><strong>Warning</strong>: the selector <code>ul:contains(&quot;chief&quot;)</code>\n  will match the list <code>&lt;ul&gt;&lt;li&gt;... the greek letter chi&lt;/li&gt;&lt;li&gt;effective&lt;/li&gt;&lt;/ul&gt;</code>\n<div><i><b>Note</b>: <code>:contains()</code> is a pseudo-class, not a pseudo-element.\n  The following CSS rule applied to the HTML fragment above will not add a red\n  background only to the word \"Markup\" but will add such a background to the whole\n  paragraph.</i></div>\n<pre>P:contains(\"Markup\") { background-color : red }</pre>\n<h4><a name=negation></a>6.6.7 The negation pseudo-class</h4>\n<p>The negation pseudo-class is a functional notation taking a <a\nhref=\"#simple-selectors-dfn\">simple selector</a>\n(excluding the negation pseudo-class itself and pseudo-elements) as an argument. It\nrepresents an element that is not represented by the argument.\n<div class=example>\n  <p>Examples:\n<p>The following CSS selector matches all <code>button</code> elements in a HTML\ndocument that are not disabled.<pre>button:not([DISABLED])</pre>\n<p>The following selector represents all but <code>FOO</code> elements.<pre>*:not(FOO)</pre>\n<p>The following group of selectors represents all elements but HTML links.<pre>html|*:not(:link):not(:visited)\n</pre></div>\n<p><strong>Note</strong>: the :not() pseudo allows useless selectors to be written.\n  For instance <code>:not(*|*)</code>, which represents no element at all, or <code>foo:not(bar)</code>,\n  which is equivalent to <code>foo</code> but with a higher specificity.\n<h3><a name=pseudo-elements>7. Pseudo-elements</a></h3>\n<p>Pseudo-elements create abstractions about the document tree beyond those\nspecified by the document language. For instance, document languages do not\noffer mechanisms to access the first letter or first line of an element's\ncontent. Pseudo-elements allow designers to refer to this otherwise inaccessible\ninformation. Pseudo-elements may also provide designers a way to refer to\ncontent that does not exist in the source document (e.g., the\n<code>::before</code> and <code>::after</code> pseudo-elements give access to\ngenerated content). \n<p>A pseudo-element is made of two colons (<code>::</code>) followed by the name of\nthe pseudo-element.\n<p><strong>Note</strong>: this <code>::</code> notation is introduced by the current\n  document in order to establish a discrimination between pseudo-classes and pseudo-elements.\n  For compatibility with existing style sheets, user agents must also accept the\n  previous one-colon notation for pseudo-elements introduced in CSS levels 1 and\n  2. This compatibility is not allowed for the new pseudo-elements introduced\n  in CSS level 3.\n<p>Pseudo-elements may only appear once in the sequence of simple selectors that\nrepresents the <a\nhref=\"#subject\">subjects</a> of the\nselector. \n<h4><a name=first-line>7.1 The ::first-line pseudo-element</a></h4>\n<p>The <code>::first-line</code> pseudo-element describes the first formatted line\nof an element.\n<p>For instance in CSS:<pre class=example>p::first-line { text-transform: uppercase }\n</pre>\n<p>The above rule means \"change the letters of the first line of every paragraph\nto uppercase\". However, the selector <code>p::first-line</code> does not match\nany real HTML element. It does match a pseudo-element that conforming user\nagents will insert at the beginning of every paragraph.\n<p>Note that the length of the first line depends on a number of factors,\nincluding the width of the page, the font size, etc. Thus, an ordinary HTML\nparagraph such as:<pre class=html-example>&lt;p&gt;This is a somewhat long HTML\nparagraph that will be broken into several\nlines. The first line will be identified\nby a fictional tag sequence. The other lines\nwill be treated as ordinary lines in the\nparagraph.&lt;/p&gt;\n</pre>\n<p>the lines of which happen to be rendered as follows if the style rule above applies:\n<pre class=html-example>THIS IS A SOMEWHAT LONG HTML PARAGRAPH THAT\nwill be broken into several lines. The first\nline will be identified by a fictional tag\nsequence. The other lines will be treated as\nordinary lines in the paragraph.\n</pre>\n<p>might be \"rewritten\" by user agents to include the <em>fictional tag sequence</em>\nfor <code>::first-line</code>. This fictional tag sequence helps to show how properties\nare inherited.\n<pre>&lt;p&gt;<b>&lt;p::first-line&gt;</b> This is a somewhat long HTML\nparagraph that<b>&lt;/p::first-line&gt;</b> will be broken into several\nlines. The first line will be identified\nby a fictional tag sequence. The other lines\nwill be treated as ordinary lines in the\nparagraph.&lt;/p&gt;\n</pre>\n<p>If a pseudo-element breaks up a real element, the desired effect can be\ndescribed by closing and then re-opening the fictional tag sequence.\nThus, if we mark up the previous paragraph with a <code>span</code> element:<pre>&lt;p&gt;<b>&lt;span class=\"test\"&gt;</b> This is a somewhat<b>&lt;/span&gt;</b> long HTML\nparagraph that will be broken into several\nlines. The first line will be identified\nby a fictional tag sequence. The other lines\nwill be treated as ordinary lines in the\nparagraph.&lt;/p&gt;\n</pre>\n<p>the user agent could generate the appropriate start and end tags for the fictional tag sequence for <code>::first-line</code>.\n\n<pre>&lt;p&gt;<b>&lt;span class=\"test\"&gt;</b>&lt;p::first-line&gt; This is a\nsomewhat&lt;/p::first-line&gt;<b>&lt;/span&gt;</b>&lt;p::first-line&gt;\nlong HTML paragraph that&lt;/p::first-line&gt; will be broken into\nseveral lines. The first line will be identified\nby a fictional tag sequence. The other lines\nwill be treated as ordinary lines in the\nparagraph.&lt;/p&gt;\n</pre>\n<p>The <code>::first-line</code> pseudo-element can only be attached to a\nblock-level element.\n<p>The <code>::first-line</code> pseudo-element is similar to an inline-level\nelement, but with certain restrictions, depending on usage. Only the following\nproperties apply to a <code>::first-line</code> pseudo-element: font properties,\ncolor properties, background properties, <span\nclass=propinst-word-spacing>'word-spacing',</span> <span\nclass=propinst-letter-spacing>'letter-spacing',</span> <span\nclass=propinst-text-decoration>'text-decoration',</span> <span\nclass=propinst-vertical-align>'vertical-align',</span> <span\nclass=propinst-text-transform>'text-transform',</span> <span\nclass=propinst-line-height>'line-height',</span> <span\nclass=propinst-text-shadow>'text-shadow'</span>, and <span\nclass=propinst-clear>'clear'.</span>\n<h4><a name=first-letter>7.2 The ::first-letter pseudo-element</a></h4>\n<p>The <code>::first-letter</code> pseudo-element describes the first formatted\n  letter of an element.\n<p>The <code>::first-letter</code> pseudo-element can be attached to all elements.\n\n<p>The <code>::first-letter</code> pseudo-element may be used for \"initial caps\" and\n\"drop caps\", which are common typographical effects. This type of initial letter\nis similar to an inline-level element if its CSS 'float' property is 'none', but\nwith certain restrictions, depending on usage. Otherwise it is similar to a\nfloated element.\n<p>These are the CSS properties that apply to <code>::first-letter</code>\npseudo-elements: font properties, color properties, background properties,\n'text-decoration', 'vertical-align' (only if 'float' is 'none'),\n'text-transform', 'line-height', margin properties, padding properties, border\nproperties, 'float', 'text-shadow', and 'clear'.\n<div class=html-example>\n<p>\n<p>The following CSS2 will make a drop cap initial letter span two lines:\n  <pre>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"&gt;\n&lt;HTML&gt;\n &lt;HEAD&gt;\n  &lt;TITLE&gt;Drop cap initial letter&lt;/TITLE&gt;\n  &lt;STYLE type=\"text/css\"&gt;\n   P               { font-size: 12pt; line-height: 12pt }\n   P::first-letter { font-size: 200%; font-style: italic;\n                     font-weight: bold; float: left }\n   SPAN            { text-transform: uppercase }\n  &lt;/STYLE&gt;\n &lt;/HEAD&gt;\n &lt;BODY&gt;\n  &lt;P&gt;&lt;SPAN&gt;The first&lt;/SPAN&gt; few words of an article\n    in The Economist.&lt;/P&gt;\n &lt;/BODY&gt;\n&lt;/HTML&gt;\n</pre>\n<p>This example might be formatted as follows:\n<div class=figure>\n<p><img height=54\nalt=\"Image illustrating the combined effect of the :first-letter and :first-line pseudo-elements\"\nsrc=\"first-letter.gif\" width=105> </div>\n<p>The fictional tag sequence is:<pre>&lt;P&gt;\n&lt;SPAN&gt;\n&lt;P::first-letter&gt;\nT\n&lt;/P::first-letter&gt;he first\n&lt;/SPAN&gt;\nfew words of an article in the Economist.\n&lt;/P&gt;\n</pre>\n<p>Note that the <code>::first-letter</code> pseudo-element tags abut the content\n(e.g., the initial character). When both the <code>::first-line</code> and the\n<code>::first-letter</code> pseudo-elements are used, the <code>::first-letter</code>\nfictional tag sequence is inserted inside the <code>::first-line</code>\nfictional tag sequence.</div>\n<p>In order to achieve traditional drop caps formatting, user agents may\napproximate font sizes, for example to align baselines. Also, the glyph outline\nmay be taken into account when formatting.\n<p>Punctuation (i.e, characters defined in Unicode <a class=noxref\nhref=\"#UNICODE\" rel=biblioentry><span\nclass=normref>[UNICODE]</span></a> in the \"open\" (Ps), \"close\" (Pe), and \"other\"\n(Po) punctuation classes), that precedes the first letter should be included, as\nin:\n<div class=figure>\n<p><img height=72\nalt=\"Quotes that precede the&#10;first letter should be included.\"\nsrc=\"first-letter2.gif\" width=114></div>\n<p>The <code>::first-letter</code> pseudo-element matches parts of elements\nonly.\n<p>Some languages may have specific rules about how to treat certain letter combinations.\n  In Dutch, for example, if the letter combination \"ij\" appears at the beginning\n  of a word, both letters should be considered within the <code>::first-letter</code>\n  pseudo-element. The <code>::first-letter</code> pseudo-element should select\n  select from beginning of element up to the first non-opening-punctuation character\n  cluster.\n<p>\n<div class=example>\n<p><a name=overlapping-example>The following example</a> illustrates how\noverlapping pseudo-elements may interact. The first letter of each\n<code>P</code> element will be green with a font size of '24pt'. The rest of the\nfirst formatted line will be 'blue' while the rest of the paragraph will be\n'red'.<pre>P { color: red; font-size: 12pt }\nP::first-letter { color: green; font-size: 200% }\nP::first-line { color: blue }\n\n&lt;P&gt;Some text that ends up on two lines&lt;/P&gt;\n</pre>\n<p>Assuming that a line break will occur before the word \"ends\", the fictional\ntag sequence for this fragment might be:<pre>&lt;P&gt;\n&lt;P::first-line&gt;\n&lt;P::first-letter&gt;\nS\n&lt;/P::first-letter&gt;ome text that\n&lt;/P::first-line&gt;\nends up on two lines\n&lt;/P&gt;\n</pre>\n<p>Note that the<code>::first-letter</code> element is inside the\n<code>::first-line</code> element. Properties set on <code>::first-line</code> are\ninherited by <code>::first-letter</code>, but are overridden if the same property is\nset on <code>::first-letter</code>.</div>\n<h4><a name=UIfragments>7.3 The UI element fragments pseudo-elements</a></h4>\n<h5><a name=selection>The ::selection pseudo-element</a></h5>\n<p>The <code>::selection</code> pseudo-element applies to the portion of a document\nthat has been highlighted by the user. This also applies, for example, to\nselected text within an editable text field. This\npseudo-element should not be confused with the <code><a\nhref=\"#checked\">:checked</a></code>\npseudo-class (which used to be named <code>:selected</code>)\n<p>Although the <code>::selection</code> pseudo-element is dynamic in nature,\n  and is altered by user action, it is reasonable to expect that when a UA rerenders\n  to a static medium (such as a printed page, see <a href=\"#CSS2\">[CSS2]</a>)\n  which was originally rendered to a dynamic medium (like screen), the UA may\n  wish to transfer the current <code>::selection</code> state to that other medium,\n  and have all the appropriate formatting and rendering take effect as well. This\n  is not required - UAs may omit the <code>::selection</code> pseudo-element for\n  static media.\n<p>These are the CSS properties that apply to <code>::selection</code>\npseudo-elements: color, cursor, background, outline. The computed value of the 'background-image' property on\n<code>::selection</code> may be ignored.\n<h4><a name=gen-content>7.4 The ::before and ::after pseudo-elements</a></h4>\n<p>The <code>::before</code> and <code>::after</code> pseudo-elements can be used to\ndescribe generated content before or after an element's content. They are\nexplained in the Generated Content/Markers CSS3 Module.\n<p>When the <code>::first-letter</code> and <code>::first-line</code> pseudo-elements\nare combined with <code>::before</code> and <code>::after</code>, they apply to the\nfirst letter or line of the element including the inserted text. \n<h2><a name=combinators>8. Combinators</a></h2>\n<h3><a name=descendant-combinators>8.1 Descendant combinator</a></h3>\n<p>At times, authors may want selectors to describe an element that is the descendant\n  of another element in the document tree (e.g., \"an <code>EM</code> element that\n  is contained within an <code>H1</code> element\"). Descendant combinators express\n  such a relationship. A descendant combinator is a <a\nhref=\"#whitespace\">white space</a> that separates two sequences of simple selectors.\n  A selector of the form \"<code>A B</code>\" represents an element <code>B</code>\n  that is an arbitrary descendant of some ancestor element <code>A</code>. \n<div class=example>Examples:\n  <p>For example, consider the following selector: <pre>h1 em</pre>\n  It represents an <code>em</code> element being the descendant of an <code>h1</code>\n  element. It is a correct and valid, but partial, description of the following\n  fragment:\n  <pre>&lt;h1&gt;This &lt;span class=\"myclass\"&gt;headline&nbsp;\nis &lt;em&gt;very&lt;/em&gt; important&lt;/span&gt;&lt;/h1&gt;</pre>The\nfollowing selector: <pre>div * p</pre>represents a <code>p</code> element that is a grandchild or later\ndescendant of a <code>div</code> element. Note the white space on either side of the\n\"*\".\n<p>The following selector, which combines descendant combinators and <a\nhref=\"#attribute-selectors\">attribute\nselectors</a>, represents an element that (1) has the <code>href</code> attribute\nset and (2) is inside a <code>p</code> that is itself inside a <code>div</code>: <pre>div p *[href]</pre></div>\n<h3><a name=child-combinators>8.2 Child combinators</a></h3>\n<p>A&nbsp;<dfn>child combinator</dfn> describes a childhood relationship between\n  two elements. A child combinator is made of the &quot;greater-than sign&quot;\n  (<code>&gt;</code>) character and separates two sequences of simple selectors.\n\n<div class=example>Examples:\n  <p>The following selector represents a <code>p</code> element that is child of\n<code>body</code>: <pre>body &gt; p</pre>\n  <p>The following example combines descendant combinators and child combinators.\n<pre>div ol&gt;li p</pre>\n<p>It represents a <code>p</code> element that is a descendant of an <code>li</code>;\nthe <code>li</code> element must be the child of an <code>ol</code> element; the\n<code>ol</code> element must be a descendant of a <code>div</code>. Notice that the\noptional white space around the \"&gt;\" combinator has been left out. \n<p>For information on selecting the first child of an element, please see the\nsection on the <code><a\nhref=\"#structural-pseudos\">:first-child</a></code>\npseudo-class above. </div>\n<h3><a name=adjacent-combinators>8.3 Adjacent sibling combinators</a></h3>\n<p>There are two different adjacent sibling combinators: direct adjacent\ncombinator and indirect adjacent combinator. \n<h4><a name=adjacent-d-combinators>8.3.1 Direct adjacent combinators</a></h4>\n<p>Direct adjacent combinators are made of the &quot;plus sign&quot; (<code>+</code>)\n  character that separates two sequences of simple selectors. The elements represented\n  by the two sequences share the same parent in the document tree and the element\n  represented by the first sequence immediately precedes the element represented\n  by the second one. \n<div class=example>Examples:\n  <p>Thus, the following selector represents a <code>p</code> element immediately\nfollowing a <code>math</code> element: <pre>math + p</pre>\n  <p>The following selector is conceptually similar to the one in the previous\nexample, except that it adds an attribute selector. Thus, it adds a constraint\nto the <code>h1</code> element that must have <code>class=\"opener\"</code>: <pre>h1.opener + h2</pre></div>\n<h4><a name=adjacent-i-combinators>8.3.2 Indirect adjacent combinator</a></h4>\n<p>Indirect adjacent combinators are made of the &quot;tilde&quot; (<code>~</code>)\n  character that separates two sequences of simple selectors. The elements represented\n  by the two sequences share the same parent in the document tree and the element\n  represented by the first sequence precedes (not necessarily immediately) the\n  element represented by the second one. \n<div class=example>Example:\n  <pre>h1 ~ pre</pre>represents a <code>pre</code> element following an <code>h1</code>. It\nis a correct and valid, but partial, description of: <pre>&lt;h1&gt;Definition of the function a&lt;/h1&gt;\n&lt;p&gt;Function a(x) has to be applied to all figures in the table.&lt;/p&gt;\n&lt;pre&gt;function a(x) = 12x/13.5&lt;/pre&gt;</pre></div>\n<h2><a name=specificity>9. Calculating a selector's specificity</a></h2>\n<p>A selector's specificity is calculated as follows:\n<ul>\n  <li>negative selectors are counted like their simple selectors argument\n  <li>count the number of ID attributes in the selector (= a)\n  <li>count the number of other attributes and pseudo-classes in the selector (=\n  b)\n  <li>count the number of element names in the selector (= c)\n  <li>ignore pseudo-elements. </li></ul>\n<p>Concatenating the three numbers a-b-c (in a number system with a large base)\ngives the specificity.\n<div class=example>\n  <p>Some examples: <pre>*               /* a=0 b=0 c=0 -&gt; specificity =   0 */\nLI              /* a=0 b=0 c=1 -&gt; specificity =   1 */\nUL LI           /* a=0 b=0 c=2 -&gt; specificity =   2 */\nUL OL+LI        /* a=0 b=0 c=3 -&gt; specificity =   3 */\nH1 + *[REL=up]  /* a=0 b=1 c=1 -&gt; specificity =  11 */\nUL OL LI.red    /* a=0 b=1 c=3 -&gt; specificity =  13 */\nLI.red.level    /* a=0 b=2 c=1 -&gt; specificity =  21 */\n#x34y           /* a=1 b=0 c=0 -&gt; specificity = 100 */\n#s12:not(FOO)   /* a=1 b=0 c=1 -&gt; specificity = 101 */\n</pre>\n<p><b>Note</b>: the specificity of the styles specified in a HTML\n<code>style</code> attribute is described in another CSS3 Module \"Cascade and\nInheritance\".</div>\n<div class=html-example></div>\n<h2><a name=w3cselgrammar>10. The grammar of <span class=\"modulename\">Selectors</span></a></h2>\n<h3><a name=grammar>10.1 Grammar</a></h3>\n<p>The grammar below defines the syntax of <span class=\"modulename\">Selectors</span>.\n  It is globally LL(1)  and can be locally LL(2) (but note that most UA's should not use it directly,\n  since it doesn't express the parsing conventions). The format of the productions\n  is optimized for human consumption and some shorthand notations beyond Yacc\n  (see&nbsp;<span class=normref><a class=noxref\nhref=\"#yacc\"\nrel=biblioentry>[YACC]</a></span>) are used: \n<ul>\n  <li><b>*</b>: 0 or more\n  <li><b>+</b>: 1 or more\n  <li><b>?</b>: 0 or 1\n  <li><b>|</b>: separates alternatives\n  <li><b>[ ]</b>: grouping </li></ul>\n<p>The productions are: \n<pre>selectors_group\n  : selector [ ',' S* selector ]*\n  ;\n\nselector\n  /* there is at least one sequence of simple selectors in a */\n  /* selector and the pseudo-elements occur only in the last */\n  /* sequence ; only pseudo-element may occur */\n  : [ simple_selector_sequence combinator ]*\n       simple_selector_sequence [ pseudo_element ]?\n  ;\n\ncombinator\n  /* combinators can be surrounded by white space */\n  : S* [ '+' | '&gt;' | '~' | /* empty */ ] S*\n  ;\n\nsimple_selector_sequence\n  /* the universal selector is optional */\n  : [ type_selector | universal ]?\n        [ HASH | class | attrib | pseudo_class | negation ]+ |\n    type_selector | universal\n  ;\n\ntype_selector\n  : [ namespace_prefix ]? element_name\n  ;\n\nnamespace_prefix\n  : [ IDENT | '*' ]? '|'\n  ;\n\nelement_name\n  : IDENT\n  ;\n\nuniversal\n  : [ namespace_prefix ]? '*'\n  ;\n\nclass\n  : '.' IDENT\n  ;\n\nattrib\n  : '[' S* [ namespace_prefix ]? IDENT S*\n        [ [ PREFIXMATCH |\n            SUFFIXMATCH |\n            SUBSTRINGMATCH |\n            '=' |\n            INCLUDES |\n            DASHMATCH ] S* [ IDENT | STRING ] S*\n        ]? ']'\n  ;\n\npseudo_class\n  /* a pseudo-class is an ident, or a function taking an */\n  /* ident or a string or a number or a simple selector  */\n  /* (excluding negation and pseudo-elements) */\n  /* or a an+b expression for argument */\n  : ':' [ IDENT | functional_pseudo ]\n  ;\n\nfunctional_pseudo\n  : FUNCTION S* [ IDENT | STRING | NUMBER |\n                  expression | negation_arg ] S* ')'\n  ;\n\nexpression\n  :  [ [ '-' | INTEGER ]? 'n' [ SIGNED_INTEGER ]? ] | INTEGER\n  ;\n\nnegation_arg\n  : type_selector | universal | HASH | class | attrib | pseudo_class\n  ;\n\npseudo_element\n  : [ ':' ]? ':' IDENT\n  ;\n</pre>\n<h3><a name=lex>10.2 Lexical scanner</a></h3>\n<p>The following is the&nbsp;<a name=x3></a><span class=index-def\ntitle=tokenizer>tokenizer</span>, written in Flex (see&nbsp;<span\nclass=normref><a class=noxref\nhref=\"#flex\"\nrel=biblioentry>[FLEX]</a></span>) notation. The tokenizer is case-insensitive.\n\n<p>The two occurrences of \"\\377\" represent the highest character number that\ncurrent versions of Flex can deal with (decimal 255). They should be read as\n\"\\4177777\" (decimal 1114111), which is the highest possible code point\nin&nbsp;<a name=x4></a><span class=index-inst title=unicode>Unicode</span>/<a\nname=x5></a><span class=index-inst title=iso-10646>ISO-10646</span>. <pre>%option case-insensitive\n\nh&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [0-9a-f]\nnonascii&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [\\200-\\377]\nunicode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\\\{h}{1,6}[ \\t\\r\\n\\f]?\nescape&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {unicode}|\\\\[ -~\\200-\\377]\nnmstart&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [a-z_]|{nonascii}|{escape}\nnmchar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [a-z0-9-_]|{nonascii}|{escape}\nstring1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\\"([\\t !#$%&amp;(-~]|\\\\{nl}|\\'|{nonascii}|{escape})*\\\"\nstring2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\'([\\t !#$%&amp;(-~]|\\\\{nl}|\\\"|{nonascii}|{escape})*\\'\n\nident&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {nmstart}{nmchar}*\nname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {nmchar}+\ninteger                 [-]?[0-9]+\nsigned_integer          [-+][0-9]+\nnum&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {integer}|[0-9]*\".\"[0-9]+\nstring&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {string1}|{string2}\nnl&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\n|\\r\\n|\\r|\\f\n%%\n\n[ \\t\\r\\n\\f]+&nbsp;&nbsp;&nbsp; {return S;}\n\n\\/\\*[^*]*\\*+([^/][^*]*\\*+)*\\/&nbsp;&nbsp; /* ignore comments */\n\n\"~=\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {return INCLUDES;}\n\"|=\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {return DASHMATCH;}\n\"^=\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(return PREFIXMATCH;)\n\"$=\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(return SUFFIXMATCH;)\n\"*=\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(return SUBSTRINGMATCH;)\n{string}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{return STRING;}\n{ident}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {return IDENT;}\n{ident}\"(\"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{return FUNCTION;}\n{num}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{return NUMBER;}\n{signed_integer}        {return SIGNED_INTEGER;}\n{integer]               {return INTEGER;}\n\"#\"{name}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{return HASH;}\n\n.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{return *yytext;}</pre>\n<h2><a name=downlevel>11. Namespaces and Down-Level Clients</a></h2>\n<p>An important issue is the interaction of CSS selectors with XML documents in\nweb clients that were produced prior to this document. Unfortunately, due to the\nfact that namespaces must be matched based on the URI which identifies the\nnamespace, not the namespace prefix, some mechanism is required to identify\nnamespaces in CSS by their URI as well. Without such a mechanism, it is\nimpossible to construct a CSS style sheet which will properly match selectors in\nall cases against a random set of XML documents. However, given complete\nknowledge of the XML document to which a style sheet is to be applied, and a\nlimited use of namespaces within the XML document, it is possible to construct a\nstyle sheet in which selectors would match elements and attributes correctly.\n\n<p>It should be noted that a down-level CSS client will (if it properly conforms\nto CSS forward compatible parsing rules) ignore all <code>@namespace</code>\nat-rules, as well as all style rules that make use of namespace qualified\nelement type or attribute selectors. The syntax of delimiting namespace prefixes\nin CSS was deliberately chosen so that down-level CSS clients would ignore the\nstyle rules rather than possibly match them incorrectly. \n<p>The use of default namespaces in CSS makes it possible to write element type\nselectors that will function in both namespace aware CSS clients as well as\ndown-level clients. It should be noted that down-level clients may incorrectly\nmatch selectors against XML elements in other namespaces. \n<p>The following are scenarios and examples in which it is possible to construct\nstyle sheets which would function properly in web clients that do not implement\nthis proposal. \n<ol>\n  <li>The XML document does not use namespaces.\n  <ul>\n    <li>In this case, it is obviously not necessary to declare or use namespaces\n    in the style sheet. Standard CSS element type and attribute selectors will\n    function adequately in a down-level client.\n    <li>In a CSS namespace aware client, the default behavior of element\n    selectors matching without regard to namespace will function properly\n    against all elements, since no namespaces are present. However, the use of\n    specific element type selectors that match only elements that have no\n    namespace (\"<code>|name</code>\") will guarantee that selectors will match only\n    XML elements that do not have a declared namespace. </li></ul>\n  <li>The XML document defines a single, default namespace used throughout the\n  document. No namespace prefixes are used in element names.\n  <ul>\n    <li>In this case, a down-level client will function as if namespaces were\n    not used in the XML document at all. Standard CSS element type and attribute\n    selectors will match against all elements. </li></ul>\n  <li>The XML document does <b>not</b> use a default namespace, all namespace\n    prefixes used are known to the style sheet author and there is a direct mapping\n    between namespace prefixes and namespace URIs. (A given prefix may only be\n    mapped to one namespace URI throughout the XML document, there may be multiple\n    prefixes mapped to the same URI).\n    <ul>\n    <li>In this case, the down-level client will view and match element type and\n    attribute selectors based on their fully qualified name, not the local part\n    as outlined in the <a\n    href=\"#typenmsp\">Type selectors and\n    Namespaces</a> section. CSS selectors may be declared using an escaped colon\n    \"<code>\\:</code>\" to describe the fully qualified names, e.g.\n    \"<code>html\\:h1</code>\" will match <code>&lt;html:h1&gt;</code>. Selectors using the\n    qualified name will only match XML elements that use the same prefix. Other\n    namespace prefixes used in the XML that are mapped to the same URI will not\n    match as expected unless additional CSS style rules are declared for them.\n    <li>Note that selectors declared in this fashion will <i>only</i> match in\n    down-level clients. A CSS namespace aware client will match element type and\n    attribute selectors based on the name's local part. So selectors declared\n    with the fully qualified name will not match (unless there is no namespace\n    prefix in the fully qualified name). </li></ul></li></ol>\n<p>In other scenarios: when the namespace prefixes used in the XML are not known\nin advance by the style sheet author; or a combination of elements with no\nnamespace are used in conjunction with elements using a default namespace; or\nthe same namespace prefix is mapped to <i>different</i> namespace URIs within\nthe same document, or in different documents; it is impossible to construct a\nCSS style sheet that will function properly against all elements in those\ndocuments, unless, the style sheet is written using a namespace URI syntax (as\noutlined in this document or similar) and the document is processed by a CSS and\nXML namespace aware client. \n<h2><a name=profiling>12. Profiles</a></h2>\n<p>Each specification using <span class=\"modulename\">Selectors</span> must define the subset of W3C\nSelectors it allows and excludes, and describe the local meaning of all the\ncomponents of that subset.\n<p>Non normative examples:\n<div class=profile>\n<table class=tprofile width=\"75%\" border=1>\n  <tbody>\n  <tr>\n    <th class=title colspan=2><span class=\"modulename\">Selectors</span> profile</th></tr>\n  <tr>\n    <th>Specification</th>\n    <td>CSS level 1</td></tr>\n  <tr>\n    <th>Accepts</th>\n    <td>type selectors <br>class selectors <br>ID selectors <br>:link,\n      :visited and :active pseudo-classes <br>descendant combinator\n      <br>:first-line and :first-letter pseudo-elements&nbsp;</td></tr>\n  <tr>\n    <th>Excludes</th>\n    <td>\n      <p>universal selector<br>attribute selectors<br>:hover and :focus\n      pseudo-classes<br>:target pseudo-class<br>:lang() pseudo-class<br>all UI\n      element states pseudo-classes<br>all structural\n      pseudo-classes<br>:contains() pseudo-class<br>negation pseudo-class<br>all\n      UI element fragments pseudo-elements<br>::before and ::after\n      pseudo-elements<br>child combinators<br>adjacent sibling combinators\n      <p>namespaces</td></tr>\n  <tr>\n    <th>Extra constraints</th>\n    <td>only one class selector allowed per sequence of simple\n  selectors</td></tr></tbody></table><br>&nbsp; <br>&nbsp;\n<table class=tprofile width=\"75%\" border=1>\n  <tbody>\n  <tr>\n    <th class=title colspan=2><span class=\"modulename\">Selectors</span> profile</th></tr>\n  <tr>\n    <th>Specification</th>\n    <td>CSS level 2</td></tr>\n  <tr>\n    <th>Accepts</th>\n    <td>type selectors <br>universal selector <br>attribute presence and\n      values selectors<br>class selectors <br>ID selectors <br>:link, :visited,\n      :active, :hover, :focus, :lang() and :first-child pseudo-classes\n      <br>descendant combinator <br>child combinator <br>adjacent direct\n      combinator <br>::first-line and ::first-letter pseudo-elements<br>::before\n      and ::after pseudo-elements</td></tr>\n  <tr>\n    <th>Excludes</th>\n    <td>\n      <p>content selectors <br>substring matching attribute selectors<br>:target\n      pseudo-classes&nbsp; <br>all UI element states pseudo-classes<br>all\n      structural pseudo-classes other than :first-child<br>:contains()\n      pseudo-class<br>negation pseudo-class<br>all UI element fragments\n      pseudo-elements<br>adjacent indirect combinators \n      <p>namespaces</td></tr>\n  <tr>\n    <th>Extra constraints</th>\n    <td>more than one class selector per sequence of simple selectors (CSS1\n      constraint) allowed</td></tr></tbody></table>\n<p>In CSS, selectors express pattern matching rules that determine which style\nrules apply to elements in the document tree. \n<p>The following selector (CSS level 2) will <b>match</b> all anchors <code>a</code>\nwith attribute <code>name</code> set inside a section 1 header <code>h1</code>: <pre>h1 a[name]</pre>\n<p>All CSS declarations attached to such a selector are applied to elements\nmatching it. </div>\n<div class=profile>\n<table class=tprofile width=\"75%\" border=1>\n  <tbody>\n  <tr>\n    <th class=title colspan=2><span class=\"modulename\">Selectors</span> profile</th></tr>\n  <tr>\n    <th>Specification</th>\n      <td>STTS 3</td>\n    </tr>\n  <tr>\n    <th>Accepts</th>\n    <td>\n      <p>type selectors<br>universal selectors<br>attribute selectors<br>class\n      selectors<br>ID selectors<br>all structural pseudo-classes<br>\n          :contains() pseudo-class<br>\n          all combinators\n      <p>namespaces</td></tr>\n  <tr>\n    <th>Excludes</th>\n    <td>non accepted pseudo-classes<br>pseudo-elements<br></td></tr>\n  <tr>\n    <th>Extra constraints</th>\n    <td>some selectors and combinators are not allowed in fragment\n      descriptions on the right side of STTS declarations.</td></tr></tbody></table>\n  <p><span class=\"modulename\">Selectors</span> can be used in STTS 3 in two different\n    manners: \n<ol>\n  <li>a selection mechanism equivalent to CSS selection mechanism: declarations\n  attached to a given selector are applied to elements matching that selector,\n  <li>fragment descriptions that appear on the right side of declarations.\n</li></ol></div>\n<h2><a name=Conformance></a>13. Conformance and Requirements</h2>\n<p>This section defines conformance with the present specification only.\n<p>The inability of a user agent to implement part of this specification due to\nthe limitations of a particular device (e.g., non interactive user agents will\nprobably not implement dynamic pseudo-classes because they make no sense without\ninteractivity) does not imply non-conformance.\n<p>All specifications reusing <span class=\"modulename\">Selectors</span> must contain a <a\nhref=\"#profiling\">Profile</a> listing the\nsubset of <span class=\"modulename\">Selectors</span> it accepts or excludes, and describing the constraints\nit adds to the current specification. \n<p>Invalidity is caused by a parsing error, e.g. an unrecognized token or a token\nwhich is not allowed at the current parsing point.\n<p>User agents must observe the rules for handling parsing errors:\n<ul>\n  <li>a simple selector containing an undeclared namespace prefix is invalid</li>\n  <li>a selector containing an invalid simple selector, an invalid combinator\n    or an invalid token is invalid. </li>\n  <li>a group of selectors containing an invalid selector is invalid.</li>\n</ul>\n<p>Implementations of this specification must behave as \"recipients\nof text data\" as defined by\n<a class=noxref href=\"#CWWW\" rel=biblioentry><span class=normref>[CWWW]</span></a>\nwhen parsing selectors and attempting matches. (In particular, implementations must assume\nthe data is normalized and must not normalize it.) Normative rules\nfor matching strings are defined in\n<a class=noxref href=\"#CWWW\" rel=biblioentry><span class=normref>[CWWW]</span></a>\nand <a class=noxref href=\"#UNICODE\" rel=biblioentry><span class=normref>[UNICODE]</span></a>\nand apply to implementations of this specification.\n\n<h2><a name=Tests></a>14. Tests</h2>\n<p>This specification contains a test suite allowing user agents to verify their\nbasic conformance to the specification. This test suite does not pretend to be\nexhaustive and does not cover all possible combined cases of <span class=\"propernoun\">Selectors</span>.\n<p>These tests are available [link forthcoming].\n<h2><a name=ACKS></a>15. Acknowledgements</h2>\n<p>This specification is the product of the W3C Working Group on Cascading Style\nSheets and Formatting Properties. In addition to the editors of this\nspecification, the members of the Working Group are:\n<ul>\n  <li>Marc Attinasi (Netscape/AOL)\n  <li>Bert Bos (W3C)\n  <li>Tantek &Ccedil;elik (Microsoft Corp.)\n  <li>Don Day (IBM)\n  <li>Martin D&uuml;rst (W3C)\n  <li>Angel Diaz (IBM)\n  <li>Daniel Glazman (Netscape/AOL from November 2000, and Electricit&eacute; de France\n    until February 2000)\n  <li>H&aring;kon W. Lie (Opera Software from April 1999, and W3C until April 1999)\n  <li>Chris Lilley (W3C)\n  <li>Dave Raggett (W3C/Openwave Systems Inc.)\n  <li>Pierre Saslawsky (Netscape/AOL)\n  <li>Robert Stevahn (Hewlett-Packard)\n  <li>Michel Suignard (Microsoft Corp.)\n  <li>Ted Wugofski (Openwave Systems Inc.)\n  <li>Steve Zilles (Adobe) </li></ul>\n<p>A number of invited experts to the Working Group have significantly contributed\n  to CSS3: L. David Baron, Tim Boland (NIST), Todd Fahrner, Daniel Glazman, Ian\n  Hickson, Eric Meyer (The OPAL Group), Jeff Veen.\n<p>Former members of the Working Group:\n<ul>\n  <li>Chris Brichford (Adobe)\n  <li>Troy Chevalier (Netscape/AOL)\n  <li>Dwayne Dicks (SoftQuad)\n  <li>Ian Jacobs (W3C)\n  <li>Lorin Jurow (Quark)\n  <li>Sho Kuwamoto (Macromedia)\n  <li>Peter Linss (Netscape/AOL)\n  <li>Steven Pemberton (CWI)\n  <li>Robert Pernett (Lotus)\n  <li>Douglas Rand (SGI)\n  <li>Nisheeth Ranjan (Netscape/AOL)\n  <li>Ed Tecot (Microsoft Corp.)\n  <li>Jared Sorensen (Novell)\n  <li>Mike Wexler (Adobe)\n  <li>John Williams (Quark)\n  <li>Chris Wilson (Microsoft Corp.) </li></ul>\n<p>We thank all of them (members, invited experts and former members) for their\nefforts.\n<p>Of course, this document derives from the CSS Level 1 and CSS level 2\nRecommendations. We thank all CSS1 and CSS2 authors, editors and\ncontributors.\n<p>Dr. Hasan Ali &Ccedil;elik suggested the simple and powerful syntax of the argument\nfor :nth-child() while the Working Group was considering much more complex\nsolutions.\n<p>The discussions on www-style@w3.org have been influential in many key issues.\n  Especially, we would like to thank Ian Graham, David Baron, Bj&ouml;rn H&ouml;hrmann,\n  <i>fantasai</i>, Jelks Cabanis and Matthew Brealey for their active and useful\n  participation.\n<h2><a name=references>16. References</a></h2>\n<ol class=refs>\n  <li>[CSS1] <a name=CSS1></a>Bert Bos, H&aring;kon Wium Lie; \"<i>Cascading Style\n    Sheets, level 1</i>\", W3C Recommendation, 17 Dec 1996, revised 11 Jan 1999<br>\n    (<code><a\n  href=\"http://www.w3.org/TR/REC-CSS1\">http://www.w3.org/TR/REC-CSS1</a></code>)\n  <li>[CSS2]<a name=CSS2></a> Bert Bos, H&aring;kon Wium Lie, Chris Lilley, Ian\n    Jacobs, editors; \"<i>Cascading Style Sheets, level 2</i>\", W3C Recommendation,\n    12 May 1998 <br>\n    (<code><a\n  href=\"http://www.w3.org/TR/REC-CSS2/\">http://www.w3.org/TR/REC-CSS2/</a></code>)\n  <li id=\"CWWW\">[CWWW] Martin J. D&uuml;rst, Fran&ccedil;ois Yergeau, Misha Wolf,\n    Asmus Freytag, Tex Texin, editors; \"<i>Character Model for the World Wide\n    Web</i>\", W3C Working Draft, 26 January 2001<br>\n    (<code><a href=\"http://www.w3.org/TR/2001/WD-charmod-20010126\">http://www.w3.org/TR/2001/WD-charmod-20010126</a></code>)\n  <li>[FLEX] <a name=\"flex\"></a>&quot;Flex: The Lexical Scanner Generator&quot;,\n    Version 2.3.7, ISBN 1882114213</li>\n  <li>[HTML4.01] <a name=\"html40\"></a>Dave Ragget, Arnaud Le Hors, Ian Jacobs,\n    editors; &quot;HTML 4.01 Specification&quot;, W3C Recommendation, 24 December\n    1999<br>\n    (<a href=\"http://www.w3.org/TR/html401/\"><code>http://www.w3.org/TR/html401/</code></a>)</li>\n  <li>[MATH] <a name=\"MATH\"></a>Patrick Ion, Robert Miner; &quot;<i>Mathematical\n    Markup Language (MathML) 1.01</i>&quot;, W3C Recommendation, revision of 7\n    July 1999<br>\n    (<code><a href=\"http://www.w3.org/1999/07/REC-MathML-19990707\">http://www.w3.org/1999/07/REC-MathML-19990707</a></code>)<br>\n  </li>\n  <li>[NMSP]&nbsp;<a name=nmsp19990625></a>Peter Linss, editor; \"<i>CSS Namespace\n    Enhancements (Proposal)</i>\", W3C Working Draft, 25 June 1999 <br>\n    (<code><a\n  href=\"http://www.w3.org/1999/06/25/WD-css3-namespace-19990625/\">http://www.w3.org/1999/06/25/WD-css3-namespace-19990625/</a></code>)\n  </li>\n  <li>[RFC3066] <a name=\"rfc3066\"></a>H. Alvestrand; &quot;Tags for the Identification\n    of Languages&quot;, Request for Comments 3066, January 2001<br>\n    (<a href=\"http://www.ietf.org/rfc/rfc3066.txt\"><code>http://www.ietf.org/rfc/rfc3066.txt</code></a>)\n  </li>\n  <li>[STTS3]<a name=STTS></a> Daniel Glazman ; \"<i>Simple Tree Transformation\n    Sheets 3</i>\", Electricit&eacute; de France, submission to the W3C, 11 Nov\n    1998 <br>\n    (<code><a\n  href=\"http://www.w3.org/TR/NOTE-STTS3\">http://www.w3.org/TR/NOTE-STTS3</a></code>)\n  <li>[SVG] <a name=\"SVG\"></a>Jon Ferraiolo ed.; &quot;<i>Scalable Vector Graphics\n    (SVG) 1.0 Specification</i>&quot;, W3C Proposed Recommendation, 19 July 2001<br>\n    (<code><a href=\"http://www.w3.org/TR/2001/PR-SVG-20010719\">http://www.w3.org/TR/2001/PR-SVG-20010719</a></code>)<br>\n  <li>[UI]&nbsp;<a name=UI-WD></a>Tantek &Ccedil;elik, editor; \"<i>User Interface\n    for CSS3</i>\", W3C Working Draft, 16 February 2000 <br>\n    (<code><a\n  href=\"http://www.w3.org/TR/2000/WD-css3-userint-20000216\">http://www.w3.org/TR/2000/WD-css3-userint-20000216</a></code>)\n  <li>[UNICODE] <a name=UNICODE></a>\"<i>The Unicode Standard: Version 3.0.1</i>\",\n    The Unicode Consortium, Addison Wesley Longman, 2000, ISBN 0-201-61633-5.<br>\n    URL: <a\n  href=\"http://www.unicode.org/unicode/standard/versions/Unicode3.0.1.html\">http://www.unicode.org/unicode/standard/versions/Unicode3.0.1.html</a>.<br>\n    The latest version of Unicode. For more information, consult the Unicode Consortium's\n    home page at <code><a\n  href=\"http://www.unicode.org/\">http://www.unicode.org/</a></code>.\n  <li>[XML-NAMES] <a name=\"XMLNAMES\"></a>Tim Bray, Dave Hollander, Andrew Layman,\n    editors; &quot;Namespaces in XML&quot;, W3C Recommendation, 14 January 1999<br>\n    (<a href=\"http://www.w3.org/TR/REC-xml-names/\"><code>http://www.w3.org/TR/REC-xml-names/</code></a>)</li>\n  <li>[YACC] <a name=\"yacc\"></a>&quot;YACC - Yet another compiler compiler&quot;,\n    S. C. Johnson, Technical Report, Murray Hill, 1975</li>\n</ol>\n<!-- Keep this comment at the end of the file\nLocal variables:\nmode: sgml\nsgml-declaration:\"~/SGML/HTML4.decl\"\nsgml-default-doctype-name:\"html\"\nsgml-minimize-attributes:t\nsgml-nofill-elements:(\"pre\" \"style\" \"br\")\nEnd:\n-->\n\n\n\n\n\n\n</body>\n</html>"]],"start1":0,"start2":0,"length1":0,"length2":109621}]],"length":109621}
